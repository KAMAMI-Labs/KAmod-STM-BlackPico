
KAmod_BlackPico_stmG030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e34  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08002eec  08002eec  00003eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003004  08003004  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003004  08003004  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003004  08003004  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003004  08003004  00004004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003008  08003008  00004008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800300c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003018  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003018  00005094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a493  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da0  00000000  00000000  0000f4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00011268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e5  00000000  00000000  00011f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015961  00000000  00000000  00012935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce35  00000000  00000000  00028296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000870b1  00000000  00000000  000350cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc17c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e8c  00000000  00000000  000bc1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000bf04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002ed4 	.word	0x08002ed4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002ed4 	.word	0x08002ed4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0002      	movs	r2, r0
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80003f8:	1dfb      	adds	r3, r7, #7
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80003fe:	d809      	bhi.n	8000414 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	001a      	movs	r2, r3
 8000406:	231f      	movs	r3, #31
 8000408:	401a      	ands	r2, r3
 800040a:	4b04      	ldr	r3, [pc, #16]	@ (800041c <__NVIC_EnableIRQ+0x30>)
 800040c:	2101      	movs	r1, #1
 800040e:	4091      	lsls	r1, r2
 8000410:	000a      	movs	r2, r1
 8000412:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000414:	46c0      	nop			@ (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}
 800041c:	e000e100 	.word	0xe000e100

08000420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	0002      	movs	r2, r0
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	1dfb      	adds	r3, r7, #7
 800042c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b7f      	cmp	r3, #127	@ 0x7f
 8000434:	d828      	bhi.n	8000488 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000436:	4a2f      	ldr	r2, [pc, #188]	@ (80004f4 <__NVIC_SetPriority+0xd4>)
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	b25b      	sxtb	r3, r3
 800043e:	089b      	lsrs	r3, r3, #2
 8000440:	33c0      	adds	r3, #192	@ 0xc0
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	589b      	ldr	r3, [r3, r2]
 8000446:	1dfa      	adds	r2, r7, #7
 8000448:	7812      	ldrb	r2, [r2, #0]
 800044a:	0011      	movs	r1, r2
 800044c:	2203      	movs	r2, #3
 800044e:	400a      	ands	r2, r1
 8000450:	00d2      	lsls	r2, r2, #3
 8000452:	21ff      	movs	r1, #255	@ 0xff
 8000454:	4091      	lsls	r1, r2
 8000456:	000a      	movs	r2, r1
 8000458:	43d2      	mvns	r2, r2
 800045a:	401a      	ands	r2, r3
 800045c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	019b      	lsls	r3, r3, #6
 8000462:	22ff      	movs	r2, #255	@ 0xff
 8000464:	401a      	ands	r2, r3
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	0018      	movs	r0, r3
 800046c:	2303      	movs	r3, #3
 800046e:	4003      	ands	r3, r0
 8000470:	00db      	lsls	r3, r3, #3
 8000472:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000474:	481f      	ldr	r0, [pc, #124]	@ (80004f4 <__NVIC_SetPriority+0xd4>)
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b25b      	sxtb	r3, r3
 800047c:	089b      	lsrs	r3, r3, #2
 800047e:	430a      	orrs	r2, r1
 8000480:	33c0      	adds	r3, #192	@ 0xc0
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000486:	e031      	b.n	80004ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000488:	4a1b      	ldr	r2, [pc, #108]	@ (80004f8 <__NVIC_SetPriority+0xd8>)
 800048a:	1dfb      	adds	r3, r7, #7
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	0019      	movs	r1, r3
 8000490:	230f      	movs	r3, #15
 8000492:	400b      	ands	r3, r1
 8000494:	3b08      	subs	r3, #8
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	3306      	adds	r3, #6
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	18d3      	adds	r3, r2, r3
 800049e:	3304      	adds	r3, #4
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	1dfa      	adds	r2, r7, #7
 80004a4:	7812      	ldrb	r2, [r2, #0]
 80004a6:	0011      	movs	r1, r2
 80004a8:	2203      	movs	r2, #3
 80004aa:	400a      	ands	r2, r1
 80004ac:	00d2      	lsls	r2, r2, #3
 80004ae:	21ff      	movs	r1, #255	@ 0xff
 80004b0:	4091      	lsls	r1, r2
 80004b2:	000a      	movs	r2, r1
 80004b4:	43d2      	mvns	r2, r2
 80004b6:	401a      	ands	r2, r3
 80004b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	019b      	lsls	r3, r3, #6
 80004be:	22ff      	movs	r2, #255	@ 0xff
 80004c0:	401a      	ands	r2, r3
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	0018      	movs	r0, r3
 80004c8:	2303      	movs	r3, #3
 80004ca:	4003      	ands	r3, r0
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d0:	4809      	ldr	r0, [pc, #36]	@ (80004f8 <__NVIC_SetPriority+0xd8>)
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	001c      	movs	r4, r3
 80004d8:	230f      	movs	r3, #15
 80004da:	4023      	ands	r3, r4
 80004dc:	3b08      	subs	r3, #8
 80004de:	089b      	lsrs	r3, r3, #2
 80004e0:	430a      	orrs	r2, r1
 80004e2:	3306      	adds	r3, #6
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	18c3      	adds	r3, r0, r3
 80004e8:	3304      	adds	r3, #4
 80004ea:	601a      	str	r2, [r3, #0]
}
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b003      	add	sp, #12
 80004f2:	bd90      	pop	{r4, r7, pc}
 80004f4:	e000e100 	.word	0xe000e100
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000500:	4b04      	ldr	r3, [pc, #16]	@ (8000514 <LL_RCC_HSI_Enable+0x18>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <LL_RCC_HSI_Enable+0x18>)
 8000506:	2180      	movs	r1, #128	@ 0x80
 8000508:	0049      	lsls	r1, r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800051c:	4b07      	ldr	r3, [pc, #28]	@ (800053c <LL_RCC_HSI_IsReady+0x24>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	2380      	movs	r3, #128	@ 0x80
 8000522:	00db      	lsls	r3, r3, #3
 8000524:	401a      	ands	r2, r3
 8000526:	2380      	movs	r3, #128	@ 0x80
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	429a      	cmp	r2, r3
 800052c:	d101      	bne.n	8000532 <LL_RCC_HSI_IsReady+0x1a>
 800052e:	2301      	movs	r3, #1
 8000530:	e000      	b.n	8000534 <LL_RCC_HSI_IsReady+0x1c>
 8000532:	2300      	movs	r3, #0
}
 8000534:	0018      	movs	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000548:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <LL_RCC_SetSysClkSource+0x24>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	2207      	movs	r2, #7
 800054e:	4393      	bics	r3, r2
 8000550:	0019      	movs	r1, r3
 8000552:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <LL_RCC_SetSysClkSource+0x24>)
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	430a      	orrs	r2, r1
 8000558:	609a      	str	r2, [r3, #8]
}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	40021000 	.word	0x40021000

08000568 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800056c:	4b03      	ldr	r3, [pc, #12]	@ (800057c <LL_RCC_GetSysClkSource+0x14>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	2238      	movs	r2, #56	@ 0x38
 8000572:	4013      	ands	r3, r2
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <LL_RCC_SetAHBPrescaler+0x28>)
 800058e:	4013      	ands	r3, r2
 8000590:	0019      	movs	r1, r3
 8000592:	4b04      	ldr	r3, [pc, #16]	@ (80005a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	430a      	orrs	r2, r1
 8000598:	609a      	str	r2, [r3, #8]
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	40021000 	.word	0x40021000
 80005a8:	fffff0ff 	.word	0xfffff0ff

080005ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	@ (80005d4 <LL_RCC_SetAPB1Prescaler+0x28>)
 80005ba:	4013      	ands	r3, r2
 80005bc:	0019      	movs	r1, r3
 80005be:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	430a      	orrs	r2, r1
 80005c4:	609a      	str	r2, [r3, #8]
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000
 80005d4:	ffff8fff 	.word	0xffff8fff

080005d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <LL_APB1_GRP1_EnableClock+0x28>)
 80005e2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <LL_APB1_GRP1_EnableClock+0x28>)
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	430a      	orrs	r2, r1
 80005ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80005ec:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <LL_APB1_GRP1_EnableClock+0x28>)
 80005ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	4013      	ands	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b004      	add	sp, #16
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000

08000604 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <LL_IOP_GRP1_EnableClock+0x28>)
 800060e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <LL_IOP_GRP1_EnableClock+0x28>)
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000618:	4b04      	ldr	r3, [pc, #16]	@ (800062c <LL_IOP_GRP1_EnableClock+0x28>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	4013      	ands	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b004      	add	sp, #16
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000

08000630 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2201      	movs	r2, #1
 800063e:	431a      	orrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}

0800064c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <LL_USART_ConfigAsyncMode+0x2c>)
 800065a:	401a      	ands	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	222a      	movs	r2, #42	@ 0x2a
 8000666:	4393      	bics	r3, r2
 8000668:	001a      	movs	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	609a      	str	r2, [r3, #8]
}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	ffffb7ff 	.word	0xffffb7ff

0800067c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	039b      	lsls	r3, r3, #14
 800068c:	401a      	ands	r2, r3
 800068e:	2380      	movs	r3, #128	@ 0x80
 8000690:	039b      	lsls	r3, r3, #14
 8000692:	429a      	cmp	r2, r3
 8000694:	d101      	bne.n	800069a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000696:	2301      	movs	r3, #1
 8000698:	e000      	b.n	800069c <LL_USART_IsActiveFlag_TEACK+0x20>
 800069a:	2300      	movs	r3, #0
}
 800069c:	0018      	movs	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	b002      	add	sp, #8
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	69da      	ldr	r2, [r3, #28]
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	03db      	lsls	r3, r3, #15
 80006b4:	401a      	ands	r2, r3
 80006b6:	2380      	movs	r3, #128	@ 0x80
 80006b8:	03db      	lsls	r3, r3, #15
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d101      	bne.n	80006c2 <LL_USART_IsActiveFlag_REACK+0x1e>
 80006be:	2301      	movs	r3, #1
 80006c0:	e000      	b.n	80006c4 <LL_USART_IsActiveFlag_REACK+0x20>
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}

080006cc <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80006d4:	f3ef 8310 	mrs	r3, PRIMASK
 80006d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80006da:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	2301      	movs	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f383 8810 	msr	PRIMASK, r3
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2240      	movs	r2, #64	@ 0x40
 80006f0:	431a      	orrs	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	f383 8810 	msr	PRIMASK, r3
}
 8000700:	46c0      	nop			@ (mov r8, r8)
}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b006      	add	sp, #24
 8000708:	bd80      	pop	{r7, pc}

0800070a <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000712:	f3ef 8310 	mrs	r3, PRIMASK
 8000716:	60bb      	str	r3, [r7, #8]
  return(result);
 8000718:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	2301      	movs	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f383 8810 	msr	PRIMASK, r3
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2280      	movs	r2, #128	@ 0x80
 800072e:	431a      	orrs	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	f383 8810 	msr	PRIMASK, r3
}
 800073e:	46c0      	nop			@ (mov r8, r8)
}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b006      	add	sp, #24
 8000746:	bd80      	pop	{r7, pc}

08000748 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000750:	f3ef 8310 	mrs	r3, PRIMASK
 8000754:	60bb      	str	r3, [r7, #8]
  return(result);
 8000756:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f383 8810 	msr	PRIMASK, r3
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2240      	movs	r2, #64	@ 0x40
 800076c:	4393      	bics	r3, r2
 800076e:	001a      	movs	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	f383 8810 	msr	PRIMASK, r3
}
 800077e:	46c0      	nop			@ (mov r8, r8)
}
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b006      	add	sp, #24
 8000786:	bd80      	pop	{r7, pc}

08000788 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000790:	f3ef 8310 	mrs	r3, PRIMASK
 8000794:	60bb      	str	r3, [r7, #8]
  return(result);
 8000796:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	2301      	movs	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	f383 8810 	msr	PRIMASK, r3
}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	4393      	bics	r3, r2
 80007ae:	001a      	movs	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	f383 8810 	msr	PRIMASK, r3
}
 80007be:	46c0      	nop			@ (mov r8, r8)
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b006      	add	sp, #24
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	000a      	movs	r2, r1
 80007d2:	1cfb      	adds	r3, r7, #3
 80007d4:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 80007d6:	1cfb      	adds	r3, r7, #3
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000806:	f000 fc81 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080a:	f000 f85b 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080e:	f000 f9db 	bl	8000bc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000812:	f000 f949 	bl	8000aa8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000816:	f000 f87d 	bl	8000914 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //LED_On();
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800081a:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <main+0xb0>)
 800081c:	2104      	movs	r1, #4
 800081e:	0018      	movs	r0, r3
 8000820:	f000 ffc0 	bl	80017a4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ((tick&1) == 0){
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <main+0xb4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2201      	movs	r2, #1
 800082a:	4013      	ands	r3, r2
 800082c:	d105      	bne.n	800083a <main+0x3a>
		  htim1.Instance->CCR2 = i;
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <main+0xb0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a21      	ldr	r2, [pc, #132]	@ (80008b8 <main+0xb8>)
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	639a      	str	r2, [r3, #56]	@ 0x38
 8000838:	e006      	b.n	8000848 <main+0x48>
	  } else {
		  htim1.Instance->CCR2 = (LED_DUTY-i);
 800083a:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <main+0xb8>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <main+0xb0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2146      	movs	r1, #70	@ 0x46
 8000844:	1a8a      	subs	r2, r1, r2
 8000846:	639a      	str	r2, [r3, #56]	@ 0x38
	  }

	  i++;
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <main+0xb8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <main+0xb8>)
 8000850:	601a      	str	r2, [r3, #0]
	  if (i >= LED_DUTY){
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <main+0xb8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b45      	cmp	r3, #69	@ 0x45
 8000858:	d925      	bls.n	80008a6 <main+0xa6>
		  i = 0;
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <main+0xb8>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
		  tick++;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <main+0xb4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <main+0xb4>)
 8000868:	601a      	str	r2, [r3, #0]
		  if (tick > 999) tick = 0;
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <main+0xb4>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	23fa      	movs	r3, #250	@ 0xfa
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	429a      	cmp	r2, r3
 8000874:	d302      	bcc.n	800087c <main+0x7c>
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <main+0xb4>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
		  //LL_GPIO_TogglePin(BlackPicoLED_GPIO_Port, BlackPicoLED_Pin);
		  n = val2str(tick, messBuff, 8);
 800087c:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <main+0xb4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	0018      	movs	r0, r3
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <main+0xbc>)
 8000884:	2208      	movs	r2, #8
 8000886:	0019      	movs	r1, r3
 8000888:	f000 fa52 	bl	8000d30 <val2str>
 800088c:	0003      	movs	r3, r0
 800088e:	607b      	str	r3, [r7, #4]
		  UartSend(messBuff, n);
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <main+0xbc>)
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f9c6 	bl	8000c28 <UartSend>
		  UartSend(testMess, (sizeof(testMess)-1));
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <main+0xc0>)
 800089e:	2133      	movs	r1, #51	@ 0x33
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 f9c1 	bl	8000c28 <UartSend>
	  }

	  LL_mDelay(20);
 80008a6:	2014      	movs	r0, #20
 80008a8:	f002 fab6 	bl	8002e18 <LL_mDelay>
	  if ((tick&1) == 0){
 80008ac:	e7ba      	b.n	8000824 <main+0x24>
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	20000028 	.word	0x20000028
 80008b4:	2000008c 	.word	0x2000008c
 80008b8:	20000088 	.word	0x20000088
 80008bc:	20000080 	.word	0x20000080
 80008c0:	08002eec 	.word	0x08002eec

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 80008c8:	f7ff fe18 	bl	80004fc <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	f7ff fe23 	bl	8000518 <LL_RCC_HSI_IsReady>
 80008d2:	0003      	movs	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d1fa      	bne.n	80008ce <SystemClock_Config+0xa>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fe51 	bl	8000580 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the HSI */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fe2e 	bl	8000540 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	f7ff fe3f 	bl	8000568 <LL_RCC_GetSysClkSource>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d1fb      	bne.n	80008e6 <SystemClock_Config+0x22>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fe5c 	bl	80005ac <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(16000000);
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemClock_Config+0x4c>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 fab2 	bl	8002e60 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 fc25 	bl	800114c <HAL_InitTick>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000906:	f000 fab8 	bl	8000e7a <Error_Handler>
  }
}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	00f42400 	.word	0x00f42400

08000914 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	@ 0x70
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	2360      	movs	r3, #96	@ 0x60
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	0018      	movs	r0, r3
 8000920:	2310      	movs	r3, #16
 8000922:	001a      	movs	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f002 faa9 	bl	8002e7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092a:	2354      	movs	r3, #84	@ 0x54
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	0018      	movs	r0, r3
 8000930:	230c      	movs	r3, #12
 8000932:	001a      	movs	r2, r3
 8000934:	2100      	movs	r1, #0
 8000936:	f002 faa1 	bl	8002e7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093a:	2338      	movs	r3, #56	@ 0x38
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	0018      	movs	r0, r3
 8000940:	231c      	movs	r3, #28
 8000942:	001a      	movs	r2, r3
 8000944:	2100      	movs	r1, #0
 8000946:	f002 fa99 	bl	8002e7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	0018      	movs	r0, r3
 800094e:	2334      	movs	r3, #52	@ 0x34
 8000950:	001a      	movs	r2, r3
 8000952:	2100      	movs	r1, #0
 8000954:	f002 fa92 	bl	8002e7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000958:	4b51      	ldr	r3, [pc, #324]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 800095a:	4a52      	ldr	r2, [pc, #328]	@ (8000aa4 <MX_TIM1_Init+0x190>)
 800095c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 800095e:	4b50      	ldr	r3, [pc, #320]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 8000960:	2210      	movs	r2, #16
 8000962:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800096a:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 800096c:	2264      	movs	r2, #100	@ 0x64
 800096e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000976:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800097c:	4b48      	ldr	r3, [pc, #288]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000982:	4b47      	ldr	r3, [pc, #284]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fe55 	bl	8001634 <HAL_TIM_Base_Init>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800098e:	f000 fa74 	bl	8000e7a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	2160      	movs	r1, #96	@ 0x60
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2280      	movs	r2, #128	@ 0x80
 8000998:	0152      	lsls	r2, r2, #5
 800099a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099c:	187a      	adds	r2, r7, r1
 800099e:	4b40      	ldr	r3, [pc, #256]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 f8d6 	bl	8001b54 <HAL_TIM_ConfigClockSource>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80009ac:	f000 fa65 	bl	8000e7a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b0:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fe96 	bl	80016e4 <HAL_TIM_PWM_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009bc:	f000 fa5d 	bl	8000e7a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2154      	movs	r1, #84	@ 0x54
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d4:	187a      	adds	r2, r7, r1
 80009d6:	4b32      	ldr	r3, [pc, #200]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 fd66 	bl	80024ac <HAL_TIMEx_MasterConfigSynchronization>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80009e4:	f000 fa49 	bl	8000e7a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e8:	2138      	movs	r1, #56	@ 0x38
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2260      	movs	r2, #96	@ 0x60
 80009ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2219      	movs	r2, #25
 80009f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2202      	movs	r2, #2
 80009fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2280      	movs	r2, #128	@ 0x80
 8000a0c:	0052      	lsls	r2, r2, #1
 8000a0e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a16:	1879      	adds	r1, r7, r1
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 ff99 	bl	8001954 <HAL_TIM_PWM_ConfigChannel>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a26:	f000 fa28 	bl	8000e7a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2280      	movs	r2, #128	@ 0x80
 8000a4c:	0192      	lsls	r2, r2, #6
 8000a4e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2280      	movs	r2, #128	@ 0x80
 8000a66:	0492      	lsls	r2, r2, #18
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a7c:	1d3a      	adds	r2, r7, #4
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 fd74 	bl	8002570 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8000a8c:	f000 f9f5 	bl	8000e7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <MX_TIM1_Init+0x18c>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fa3c 	bl	8000f10 <HAL_TIM_MspPostInit>

}
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b01c      	add	sp, #112	@ 0x70
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000028 	.word	0x20000028
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b08f      	sub	sp, #60	@ 0x3c
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000aae:	2418      	movs	r4, #24
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f002 f9df 	bl	8002e7c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	003b      	movs	r3, r7
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	2318      	movs	r3, #24
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f002 f9d8 	bl	8002e7c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	029b      	lsls	r3, r3, #10
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff fd81 	bl	80005d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f7ff fd94 	bl	8000604 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000adc:	003b      	movs	r3, r7
 8000ade:	2204      	movs	r2, #4
 8000ae0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ae8:	003b      	movs	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aee:	003b      	movs	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000af4:	003b      	movs	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000afa:	003b      	movs	r3, r7
 8000afc:	2201      	movs	r2, #1
 8000afe:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	003a      	movs	r2, r7
 8000b02:	23a0      	movs	r3, #160	@ 0xa0
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 fe86 	bl	800281a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2208      	movs	r2, #8
 8000b12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b14:	003b      	movs	r3, r7
 8000b16:	2202      	movs	r2, #2
 8000b18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b20:	003b      	movs	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	2201      	movs	r2, #1
 8000b30:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	003a      	movs	r2, r7
 8000b34:	23a0      	movs	r3, #160	@ 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	0011      	movs	r1, r2
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 fe6d 	bl	800281a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	201c      	movs	r0, #28
 8000b44:	f7ff fc6c 	bl	8000420 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b48:	201c      	movs	r0, #28
 8000b4a:	f7ff fc4f 	bl	80003ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	22e1      	movs	r2, #225	@ 0xe1
 8000b58:	0252      	lsls	r2, r2, #9
 8000b5a:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b5c:	0021      	movs	r1, r4
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <MX_USART2_UART_Init+0x11c>)
 8000b86:	0019      	movs	r1, r3
 8000b88:	0010      	movs	r0, r2
 8000b8a:	f002 f8d3 	bl	8002d34 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <MX_USART2_UART_Init+0x11c>)
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fd5b 	bl	800064c <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_USART2_UART_Init+0x11c>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fd49 	bl	8000630 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_USART2_UART_Init+0x11c>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fd6a 	bl	800067c <LL_USART_IsActiveFlag_TEACK>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d0f9      	beq.n	8000ba0 <MX_USART2_UART_Init+0xf8>
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <MX_USART2_UART_Init+0x11c>)
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fd78 	bl	80006a4 <LL_USART_IsActiveFlag_REACK>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d0f3      	beq.n	8000ba0 <MX_USART2_UART_Init+0xf8>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b00f      	add	sp, #60	@ 0x3c
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	40004400 	.word	0x40004400

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	003b      	movs	r3, r7
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2318      	movs	r3, #24
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f002 f950 	bl	8002e7c <memset>
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fd11 	bl	8000604 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff fd0e 	bl	8000604 <LL_IOP_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  	LL_GPIO_ResetOutputPin(BlackPicoLED_GPIO_Port, BlackPicoLED_Pin);
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_GPIO_Init+0x5c>)
 8000bea:	2108      	movs	r1, #8
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fdfa 	bl	80007e6 <LL_GPIO_ResetOutputPin>
    GPIO_InitStruct.Pin = BlackPicoLED_Pin;
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bf8:	003b      	movs	r3, r7
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bfe:	003b      	movs	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(BlackPicoLED_GPIO_Port, &GPIO_InitStruct);
 8000c10:	003b      	movs	r3, r7
 8000c12:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <MX_GPIO_Init+0x5c>)
 8000c14:	0019      	movs	r1, r3
 8000c16:	0010      	movs	r0, r2
 8000c18:	f001 fdff 	bl	800281a <LL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b006      	add	sp, #24
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	50000400 	.word	0x50000400

08000c28 <UartSend>:

void LED_Off(void){
	LL_GPIO_ResetOutputPin(BlackPicoLED_GPIO_Port, BlackPicoLED_Pin);
}

void UartSend(uint8_t *mess, uint32_t len){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
	while (messFinish > 0){};
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <UartSend+0x78>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1fb      	bne.n	8000c34 <UartSend+0xc>
	messFinish = 1;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <UartSend+0x78>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]
	messPt = mess;
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <UartSend+0x7c>)
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	601a      	str	r2, [r3, #0]
	messLen = len;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <UartSend+0x80>)
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	601a      	str	r2, [r3, #0]
	if (messLen > 0){
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <UartSend+0x80>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d01f      	beq.n	8000c96 <UartSend+0x6e>
		LL_USART_TransmitData8(USART2, *messPt);
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <UartSend+0x7c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4a13      	ldr	r2, [pc, #76]	@ (8000cac <UartSend+0x84>)
 8000c60:	0019      	movs	r1, r3
 8000c62:	0010      	movs	r0, r2
 8000c64:	f7ff fdb0 	bl	80007c8 <LL_USART_TransmitData8>
		messPt++;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <UartSend+0x7c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <UartSend+0x7c>)
 8000c70:	601a      	str	r2, [r3, #0]
		messLen--;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <UartSend+0x80>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	1e5a      	subs	r2, r3, #1
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <UartSend+0x80>)
 8000c7a:	601a      	str	r2, [r3, #0]
		if (messLen > 0){
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <UartSend+0x80>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d004      	beq.n	8000c8e <UartSend+0x66>
			LL_USART_EnableIT_TXE(USART2);
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <UartSend+0x84>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff fd3f 	bl	800070a <LL_USART_EnableIT_TXE_TXFNF>
		} else {
			LL_USART_EnableIT_TC(USART2);
		}
	}
}
 8000c8c:	e003      	b.n	8000c96 <UartSend+0x6e>
			LL_USART_EnableIT_TC(USART2);
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <UartSend+0x84>)
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff fd1b 	bl	80006cc <LL_USART_EnableIT_TC>
}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	2000007c 	.word	0x2000007c
 8000ca4:	20000074 	.word	0x20000074
 8000ca8:	20000078 	.word	0x20000078
 8000cac:	40004400 	.word	0x40004400

08000cb0 <USART_TXEmpty_Callback>:

void USART_TXEmpty_Callback(void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	LL_USART_TransmitData8(USART2, *messPt);
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <USART_TXEmpty_Callback+0x54>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <USART_TXEmpty_Callback+0x58>)
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	f7ff fd81 	bl	80007c8 <LL_USART_TransmitData8>
	messPt++;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <USART_TXEmpty_Callback+0x54>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <USART_TXEmpty_Callback+0x54>)
 8000cce:	601a      	str	r2, [r3, #0]
	messLen--;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <USART_TXEmpty_Callback+0x5c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <USART_TXEmpty_Callback+0x5c>)
 8000cd8:	601a      	str	r2, [r3, #0]
	if (messLen > 0){
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <USART_TXEmpty_Callback+0x5c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d004      	beq.n	8000cec <USART_TXEmpty_Callback+0x3c>
		LL_USART_EnableIT_TXE(USART2);
 8000ce2:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <USART_TXEmpty_Callback+0x58>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fd10 	bl	800070a <LL_USART_EnableIT_TXE_TXFNF>
	} else {
		LL_USART_DisableIT_TXE(USART2);
		LL_USART_EnableIT_TC(USART2);
	}
}
 8000cea:	e007      	b.n	8000cfc <USART_TXEmpty_Callback+0x4c>
		LL_USART_DisableIT_TXE(USART2);
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <USART_TXEmpty_Callback+0x58>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fd4a 	bl	8000788 <LL_USART_DisableIT_TXE_TXFNF>
		LL_USART_EnableIT_TC(USART2);
 8000cf4:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <USART_TXEmpty_Callback+0x58>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fce8 	bl	80006cc <LL_USART_EnableIT_TC>
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	20000074 	.word	0x20000074
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	20000078 	.word	0x20000078

08000d10 <USART_CharTransmitComplete_Callback>:

void USART_CharTransmitComplete_Callback(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	messFinish = 0;
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <USART_CharTransmitComplete_Callback+0x18>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
	LL_USART_DisableIT_TC(USART2);
 8000d1a:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <USART_CharTransmitComplete_Callback+0x1c>)
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fd13 	bl	8000748 <LL_USART_DisableIT_TC>
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000007c 	.word	0x2000007c
 8000d2c:	40004400 	.word	0x40004400

08000d30 <val2str>:

uint32_t val2str(int32_t val, uint8_t *dst, uint32_t buff_len){
 8000d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d32:	46c6      	mov	lr, r8
 8000d34:	b500      	push	{lr}
 8000d36:	b08e      	sub	sp, #56	@ 0x38
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6278      	str	r0, [r7, #36]	@ 0x24
 8000d3c:	6239      	str	r1, [r7, #32]
 8000d3e:	61fa      	str	r2, [r7, #28]
 8000d40:	466b      	mov	r3, sp
 8000d42:	4698      	mov	r8, r3
	uint8_t buff[buff_len];
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	001a      	movs	r2, r3
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60fa      	str	r2, [r7, #12]
 8000d52:	68b8      	ldr	r0, [r7, #8]
 8000d54:	68f9      	ldr	r1, [r7, #12]
 8000d56:	0002      	movs	r2, r0
 8000d58:	0f52      	lsrs	r2, r2, #29
 8000d5a:	000e      	movs	r6, r1
 8000d5c:	00f6      	lsls	r6, r6, #3
 8000d5e:	617e      	str	r6, [r7, #20]
 8000d60:	697e      	ldr	r6, [r7, #20]
 8000d62:	4316      	orrs	r6, r2
 8000d64:	617e      	str	r6, [r7, #20]
 8000d66:	0002      	movs	r2, r0
 8000d68:	00d2      	lsls	r2, r2, #3
 8000d6a:	613a      	str	r2, [r7, #16]
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	6838      	ldr	r0, [r7, #0]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	0002      	movs	r2, r0
 8000d78:	0f52      	lsrs	r2, r2, #29
 8000d7a:	000e      	movs	r6, r1
 8000d7c:	00f5      	lsls	r5, r6, #3
 8000d7e:	4315      	orrs	r5, r2
 8000d80:	0002      	movs	r2, r0
 8000d82:	00d4      	lsls	r4, r2, #3
 8000d84:	3307      	adds	r3, #7
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	466a      	mov	r2, sp
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	469d      	mov	sp, r3
 8000d90:	466b      	mov	r3, sp
 8000d92:	3300      	adds	r3, #0
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
	int16_t i = 0;
 8000d96:	211e      	movs	r1, #30
 8000d98:	2018      	movs	r0, #24
 8000d9a:	180b      	adds	r3, r1, r0
 8000d9c:	19db      	adds	r3, r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	801a      	strh	r2, [r3, #0]
	uint32_t result = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	@ 0x30

	for (i = 0; i < buff_len-1; i++){
 8000da6:	180b      	adds	r3, r1, r0
 8000da8:	19db      	adds	r3, r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	801a      	strh	r2, [r3, #0]
 8000dae:	e027      	b.n	8000e00 <val2str+0xd0>
		buff[i] = (val % 10) + '0';
 8000db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db2:	210a      	movs	r1, #10
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fb13 	bl	80003e0 <__aeabi_idivmod>
 8000dba:	000b      	movs	r3, r1
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	241e      	movs	r4, #30
 8000dc0:	2518      	movs	r5, #24
 8000dc2:	1963      	adds	r3, r4, r5
 8000dc4:	19db      	adds	r3, r3, r7
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	5e5b      	ldrsh	r3, [r3, r1]
 8000dca:	3230      	adds	r2, #48	@ 0x30
 8000dcc:	b2d1      	uxtb	r1, r2
 8000dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dd0:	54d1      	strb	r1, [r2, r3]
		val /= 10;
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	210a      	movs	r1, #10
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fa1c 	bl	8000214 <__divsi3>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
		result++;
 8000de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000de2:	3301      	adds	r3, #1
 8000de4:	633b      	str	r3, [r7, #48]	@ 0x30
		if (val == 0) break;
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d014      	beq.n	8000e16 <val2str+0xe6>
	for (i = 0; i < buff_len-1; i++){
 8000dec:	1963      	adds	r3, r4, r5
 8000dee:	19db      	adds	r3, r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	5e9b      	ldrsh	r3, [r3, r2]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3301      	adds	r3, #1
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	1963      	adds	r3, r4, r5
 8000dfc:	19db      	adds	r3, r3, r7
 8000dfe:	801a      	strh	r2, [r3, #0]
 8000e00:	231e      	movs	r3, #30
 8000e02:	2218      	movs	r2, #24
 8000e04:	189b      	adds	r3, r3, r2
 8000e06:	19db      	adds	r3, r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	5e9a      	ldrsh	r2, [r3, r2]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3cd      	bcc.n	8000db0 <val2str+0x80>
 8000e14:	e018      	b.n	8000e48 <val2str+0x118>
		if (val == 0) break;
 8000e16:	46c0      	nop			@ (mov r8, r8)
	}

	for (; i >= 0; i--){
 8000e18:	e016      	b.n	8000e48 <val2str+0x118>
		*dst = buff[i];
 8000e1a:	211e      	movs	r1, #30
 8000e1c:	2018      	movs	r0, #24
 8000e1e:	180b      	adds	r3, r1, r0
 8000e20:	19db      	adds	r3, r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	5e9b      	ldrsh	r3, [r3, r2]
 8000e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e28:	5cd2      	ldrb	r2, [r2, r3]
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	701a      	strb	r2, [r3, #0]
		dst++;
 8000e2e:	6a3b      	ldr	r3, [r7, #32]
 8000e30:	3301      	adds	r3, #1
 8000e32:	623b      	str	r3, [r7, #32]
	for (; i >= 0; i--){
 8000e34:	180b      	adds	r3, r1, r0
 8000e36:	19db      	adds	r3, r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	5e9b      	ldrsh	r3, [r3, r2]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	180b      	adds	r3, r1, r0
 8000e44:	19db      	adds	r3, r3, r7
 8000e46:	801a      	strh	r2, [r3, #0]
 8000e48:	231e      	movs	r3, #30
 8000e4a:	2218      	movs	r2, #24
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	19db      	adds	r3, r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	5e9b      	ldrsh	r3, [r3, r2]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	dae0      	bge.n	8000e1a <val2str+0xea>
	}

	*dst = ' ';
 8000e58:	6a3b      	ldr	r3, [r7, #32]
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	701a      	strb	r2, [r3, #0]
	dst++;
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	3301      	adds	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]
	result++;
 8000e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e66:	3301      	adds	r3, #1
 8000e68:	633b      	str	r3, [r7, #48]	@ 0x30

	return result;
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e6c:	46c5      	mov	sp, r8
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b00e      	add	sp, #56	@ 0x38
 8000e74:	bc80      	pop	{r7}
 8000e76:	46b8      	mov	r8, r7
 8000e78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e7a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7e:	b672      	cpsid	i
}
 8000e80:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	e7fd      	b.n	8000e82 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <HAL_MspInit+0x44>)
 8000e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_MspInit+0x44>)
 8000e94:	2101      	movs	r1, #1
 8000e96:	430a      	orrs	r2, r1
 8000e98:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <HAL_MspInit+0x44>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_MspInit+0x44>)
 8000ea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <HAL_MspInit+0x44>)
 8000eac:	2180      	movs	r1, #128	@ 0x80
 8000eae:	0549      	lsls	r1, r1, #21
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <HAL_MspInit+0x44>)
 8000eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eb8:	2380      	movs	r3, #128	@ 0x80
 8000eba:	055b      	lsls	r3, r3, #21
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <HAL_TIM_Base_MspInit+0x38>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10d      	bne.n	8000efe <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ee8:	2180      	movs	r1, #128	@ 0x80
 8000eea:	0109      	lsls	r1, r1, #4
 8000eec:	430a      	orrs	r2, r1
 8000eee:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ef2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b004      	add	sp, #16
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	40012c00 	.word	0x40012c00
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b089      	sub	sp, #36	@ 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	240c      	movs	r4, #12
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	2314      	movs	r3, #20
 8000f20:	001a      	movs	r2, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	f001 ffaa 	bl	8002e7c <memset>
  if(htim->Instance==TIM1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <HAL_TIM_MspPostInit+0x70>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d121      	bne.n	8000f76 <HAL_TIM_MspPostInit+0x66>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <HAL_TIM_MspPostInit+0x74>)
 8000f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <HAL_TIM_MspPostInit+0x74>)
 8000f38:	2102      	movs	r1, #2
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_TIM_MspPostInit+0x74>)
 8000f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f42:	2202      	movs	r2, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f4a:	0021      	movs	r1, r4
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2208      	movs	r2, #8
 8000f50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2202      	movs	r2, #2
 8000f56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2201      	movs	r2, #1
 8000f68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	4a06      	ldr	r2, [pc, #24]	@ (8000f88 <HAL_TIM_MspPostInit+0x78>)
 8000f6e:	0019      	movs	r1, r3
 8000f70:	0010      	movs	r0, r2
 8000f72:	f000 f9fb 	bl	800136c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b009      	add	sp, #36	@ 0x24
 8000f7c:	bd90      	pop	{r4, r7, pc}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	40012c00 	.word	0x40012c00
 8000f84:	40021000 	.word	0x40021000
 8000f88:	50000400 	.word	0x50000400

08000f8c <LL_USART_IsActiveFlag_TC>:
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	2240      	movs	r2, #64	@ 0x40
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b40      	cmp	r3, #64	@ 0x40
 8000f9e:	d101      	bne.n	8000fa4 <LL_USART_IsActiveFlag_TC+0x18>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <LL_USART_IsActiveFlag_TC+0x1a>
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}

08000fae <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	2280      	movs	r2, #128	@ 0x80
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b80      	cmp	r3, #128	@ 0x80
 8000fc0:	d101      	bne.n	8000fc6 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <LL_USART_ClearFlag_TC>:
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2240      	movs	r2, #64	@ 0x40
 8000fdc:	621a      	str	r2, [r3, #32]
}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <LL_USART_IsEnabledIT_TC>:
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2240      	movs	r2, #64	@ 0x40
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b40      	cmp	r3, #64	@ 0x40
 8000ff8:	d101      	bne.n	8000ffe <LL_USART_IsEnabledIT_TC+0x18>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <LL_USART_IsEnabledIT_TC+0x1a>
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}

08001008 <LL_USART_IsEnabledIT_TXE_TXFNF>:
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2280      	movs	r2, #128	@ 0x80
 8001016:	4013      	ands	r3, r2
 8001018:	2b80      	cmp	r3, #128	@ 0x80
 800101a:	d101      	bne.n	8001020 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8001020:	2300      	movs	r3, #0
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}

0800102a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	e7fd      	b.n	800102e <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	e7fd      	b.n	8001036 <HardFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001052:	f000 f8c5 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if (LL_USART_IsEnabledIT_TXE(USART2) && LL_USART_IsActiveFlag_TXE(USART2)){
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <USART2_IRQHandler+0x4c>)
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff ffd0 	bl	8001008 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d007      	beq.n	800107c <USART2_IRQHandler+0x20>
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <USART2_IRQHandler+0x4c>)
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff ff9d 	bl	8000fae <LL_USART_IsActiveFlag_TXE_TXFNF>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d001      	beq.n	800107c <USART2_IRQHandler+0x20>
	    /* TXE flag will be automatically cleared when writing new data in TDR register */
	    /* Call function in charge of handling empty DR => will lead to transmission of next character */
	    USART_TXEmpty_Callback();
 8001078:	f7ff fe1a 	bl	8000cb0 <USART_TXEmpty_Callback>
	}

	if (LL_USART_IsEnabledIT_TC(USART2) && LL_USART_IsActiveFlag_TC(USART2))
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <USART2_IRQHandler+0x4c>)
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff ffb1 	bl	8000fe6 <LL_USART_IsEnabledIT_TC>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d00b      	beq.n	80010a0 <USART2_IRQHandler+0x44>
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <USART2_IRQHandler+0x4c>)
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff ff7e 	bl	8000f8c <LL_USART_IsActiveFlag_TC>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d005      	beq.n	80010a0 <USART2_IRQHandler+0x44>
	{
		/* Clear TC flag */
	    LL_USART_ClearFlag_TC(USART2);
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <USART2_IRQHandler+0x4c>)
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff ff9a 	bl	8000fd0 <LL_USART_ClearFlag_TC>
	    /* Call function in charge of handling end of transmission of sent character
	       and prepare next character transmission */
	    USART_CharTransmitComplete_Callback();
 800109c:	f7ff fe38 	bl	8000d10 <USART_CharTransmitComplete_Callback>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	40004400 	.word	0x40004400

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b8:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010bc:	f7ff fff6 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c2:	490d      	ldr	r1, [pc, #52]	@ (80010f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c4:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <LoopForever+0xe>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001104 <LoopForever+0x16>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010e6:	f001 fed1 	bl	8002e8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010ea:	f7ff fb89 	bl	8000800 <main>

080010ee <LoopForever>:

LoopForever:
  b LoopForever
 80010ee:	e7fe      	b.n	80010ee <LoopForever>
  ldr   r0, =_estack
 80010f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010fc:	0800300c 	.word	0x0800300c
  ldr r2, =_sbss
 8001100:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001104:	20000094 	.word	0x20000094

08001108 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_IRQHandler>
	...

0800110c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_Init+0x3c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_Init+0x3c>)
 800111e:	2180      	movs	r1, #128	@ 0x80
 8001120:	0049      	lsls	r1, r1, #1
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	2003      	movs	r0, #3
 8001128:	f000 f810 	bl	800114c <HAL_InitTick>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d003      	beq.n	8001138 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e001      	b.n	800113c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fea6 	bl	8000e88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_InitTick+0x88>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d02b      	beq.n	80011bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001164:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <HAL_InitTick+0x8c>)
 8001166:	681c      	ldr	r4, [r3, #0]
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_InitTick+0x88>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	0019      	movs	r1, r3
 800116e:	23fa      	movs	r3, #250	@ 0xfa
 8001170:	0098      	lsls	r0, r3, #2
 8001172:	f7fe ffc5 	bl	8000100 <__udivsi3>
 8001176:	0003      	movs	r3, r0
 8001178:	0019      	movs	r1, r3
 800117a:	0020      	movs	r0, r4
 800117c:	f7fe ffc0 	bl	8000100 <__udivsi3>
 8001180:	0003      	movs	r3, r0
 8001182:	0018      	movs	r0, r3
 8001184:	f000 f8e5 	bl	8001352 <HAL_SYSTICK_Config>
 8001188:	1e03      	subs	r3, r0, #0
 800118a:	d112      	bne.n	80011b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d80a      	bhi.n	80011a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	2301      	movs	r3, #1
 8001196:	425b      	negs	r3, r3
 8001198:	2200      	movs	r2, #0
 800119a:	0018      	movs	r0, r3
 800119c:	f000 f8c4 	bl	8001328 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_InitTick+0x90>)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e00d      	b.n	80011c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011a8:	230f      	movs	r3, #15
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	e008      	b.n	80011c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011b2:	230f      	movs	r3, #15
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e003      	b.n	80011c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	781b      	ldrb	r3, [r3, #0]
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b005      	add	sp, #20
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_IncTick+0x1c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	001a      	movs	r2, r3
 80011ea:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <HAL_IncTick+0x20>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	18d2      	adds	r2, r2, r3
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_IncTick+0x20>)
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	46c0      	nop			@ (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000090 	.word	0x20000090

08001204 <__NVIC_SetPriority>:
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	0002      	movs	r2, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b7f      	cmp	r3, #127	@ 0x7f
 8001218:	d828      	bhi.n	800126c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800121a:	4a2f      	ldr	r2, [pc, #188]	@ (80012d8 <__NVIC_SetPriority+0xd4>)
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b25b      	sxtb	r3, r3
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	33c0      	adds	r3, #192	@ 0xc0
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	589b      	ldr	r3, [r3, r2]
 800122a:	1dfa      	adds	r2, r7, #7
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	0011      	movs	r1, r2
 8001230:	2203      	movs	r2, #3
 8001232:	400a      	ands	r2, r1
 8001234:	00d2      	lsls	r2, r2, #3
 8001236:	21ff      	movs	r1, #255	@ 0xff
 8001238:	4091      	lsls	r1, r2
 800123a:	000a      	movs	r2, r1
 800123c:	43d2      	mvns	r2, r2
 800123e:	401a      	ands	r2, r3
 8001240:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	019b      	lsls	r3, r3, #6
 8001246:	22ff      	movs	r2, #255	@ 0xff
 8001248:	401a      	ands	r2, r3
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	0018      	movs	r0, r3
 8001250:	2303      	movs	r3, #3
 8001252:	4003      	ands	r3, r0
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001258:	481f      	ldr	r0, [pc, #124]	@ (80012d8 <__NVIC_SetPriority+0xd4>)
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b25b      	sxtb	r3, r3
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	430a      	orrs	r2, r1
 8001264:	33c0      	adds	r3, #192	@ 0xc0
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	501a      	str	r2, [r3, r0]
}
 800126a:	e031      	b.n	80012d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126c:	4a1b      	ldr	r2, [pc, #108]	@ (80012dc <__NVIC_SetPriority+0xd8>)
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	0019      	movs	r1, r3
 8001274:	230f      	movs	r3, #15
 8001276:	400b      	ands	r3, r1
 8001278:	3b08      	subs	r3, #8
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3306      	adds	r3, #6
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	3304      	adds	r3, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	1dfa      	adds	r2, r7, #7
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	0011      	movs	r1, r2
 800128c:	2203      	movs	r2, #3
 800128e:	400a      	ands	r2, r1
 8001290:	00d2      	lsls	r2, r2, #3
 8001292:	21ff      	movs	r1, #255	@ 0xff
 8001294:	4091      	lsls	r1, r2
 8001296:	000a      	movs	r2, r1
 8001298:	43d2      	mvns	r2, r2
 800129a:	401a      	ands	r2, r3
 800129c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	019b      	lsls	r3, r3, #6
 80012a2:	22ff      	movs	r2, #255	@ 0xff
 80012a4:	401a      	ands	r2, r3
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	0018      	movs	r0, r3
 80012ac:	2303      	movs	r3, #3
 80012ae:	4003      	ands	r3, r0
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <__NVIC_SetPriority+0xd8>)
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	001c      	movs	r4, r3
 80012bc:	230f      	movs	r3, #15
 80012be:	4023      	ands	r3, r4
 80012c0:	3b08      	subs	r3, #8
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	430a      	orrs	r2, r1
 80012c6:	3306      	adds	r3, #6
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	18c3      	adds	r3, r0, r3
 80012cc:	3304      	adds	r3, #4
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b003      	add	sp, #12
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	1e5a      	subs	r2, r3, #1
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	045b      	lsls	r3, r3, #17
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d301      	bcc.n	80012f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f4:	2301      	movs	r3, #1
 80012f6:	e010      	b.n	800131a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <SysTick_Config+0x44>)
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	3a01      	subs	r2, #1
 80012fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001300:	2301      	movs	r3, #1
 8001302:	425b      	negs	r3, r3
 8001304:	2103      	movs	r1, #3
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff ff7c 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <SysTick_Config+0x44>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <SysTick_Config+0x44>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	210f      	movs	r1, #15
 8001334:	187b      	adds	r3, r7, r1
 8001336:	1c02      	adds	r2, r0, #0
 8001338:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	187b      	adds	r3, r7, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b25b      	sxtb	r3, r3
 8001342:	0011      	movs	r1, r2
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff ff5d 	bl	8001204 <__NVIC_SetPriority>
}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b004      	add	sp, #16
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff ffbf 	bl	80012e0 <SysTick_Config>
 8001362:	0003      	movs	r3, r0
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137a:	e147      	b.n	800160c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4091      	lsls	r1, r2
 8001386:	000a      	movs	r2, r1
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d100      	bne.n	8001394 <HAL_GPIO_Init+0x28>
 8001392:	e138      	b.n	8001606 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2203      	movs	r2, #3
 800139a:	4013      	ands	r3, r2
 800139c:	2b01      	cmp	r3, #1
 800139e:	d005      	beq.n	80013ac <HAL_GPIO_Init+0x40>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d130      	bne.n	800140e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	409a      	lsls	r2, r3
 80013ba:	0013      	movs	r3, r2
 80013bc:	43da      	mvns	r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	409a      	lsls	r2, r3
 80013ce:	0013      	movs	r3, r2
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e2:	2201      	movs	r2, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	2201      	movs	r2, #1
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2203      	movs	r2, #3
 8001414:	4013      	ands	r3, r2
 8001416:	2b03      	cmp	r3, #3
 8001418:	d017      	beq.n	800144a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	43da      	mvns	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	4013      	ands	r3, r2
 8001452:	2b02      	cmp	r3, #2
 8001454:	d123      	bne.n	800149e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	58d3      	ldr	r3, [r2, r3]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2207      	movs	r2, #7
 8001468:	4013      	ands	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	220f      	movs	r2, #15
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	43da      	mvns	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2107      	movs	r1, #7
 8001482:	400b      	ands	r3, r1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	6939      	ldr	r1, [r7, #16]
 800149c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	401a      	ands	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	23c0      	movs	r3, #192	@ 0xc0
 80014d8:	029b      	lsls	r3, r3, #10
 80014da:	4013      	ands	r3, r2
 80014dc:	d100      	bne.n	80014e0 <HAL_GPIO_Init+0x174>
 80014de:	e092      	b.n	8001606 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014e0:	4a50      	ldr	r2, [pc, #320]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3318      	adds	r3, #24
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	589b      	ldr	r3, [r3, r2]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2203      	movs	r2, #3
 80014f2:	4013      	ands	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	220f      	movs	r2, #15
 80014f8:	409a      	lsls	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	43da      	mvns	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	23a0      	movs	r3, #160	@ 0xa0
 8001508:	05db      	lsls	r3, r3, #23
 800150a:	429a      	cmp	r2, r3
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0x1ca>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a45      	ldr	r2, [pc, #276]	@ (8001628 <HAL_GPIO_Init+0x2bc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d00d      	beq.n	8001532 <HAL_GPIO_Init+0x1c6>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a44      	ldr	r2, [pc, #272]	@ (800162c <HAL_GPIO_Init+0x2c0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d007      	beq.n	800152e <HAL_GPIO_Init+0x1c2>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a43      	ldr	r2, [pc, #268]	@ (8001630 <HAL_GPIO_Init+0x2c4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_GPIO_Init+0x1be>
 8001526:	2303      	movs	r3, #3
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x1cc>
 800152a:	2305      	movs	r3, #5
 800152c:	e004      	b.n	8001538 <HAL_GPIO_Init+0x1cc>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x1cc>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x1cc>
 8001536:	2300      	movs	r3, #0
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	2103      	movs	r1, #3
 800153c:	400a      	ands	r2, r1
 800153e:	00d2      	lsls	r2, r2, #3
 8001540:	4093      	lsls	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001548:	4936      	ldr	r1, [pc, #216]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3318      	adds	r3, #24
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001556:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	2380      	movs	r3, #128	@ 0x80
 800156c:	035b      	lsls	r3, r3, #13
 800156e:	4013      	ands	r3, r2
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800157a:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001580:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43da      	mvns	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	039b      	lsls	r3, r3, #14
 8001598:	4013      	ands	r3, r2
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80015ac:	2384      	movs	r3, #132	@ 0x84
 80015ae:	58d3      	ldr	r3, [r2, r3]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43da      	mvns	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	029b      	lsls	r3, r3, #10
 80015c4:	4013      	ands	r3, r2
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d0:	4914      	ldr	r1, [pc, #80]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80015d2:	2284      	movs	r2, #132	@ 0x84
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015d8:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80015da:	2380      	movs	r3, #128	@ 0x80
 80015dc:	58d3      	ldr	r3, [r2, r3]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43da      	mvns	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	2380      	movs	r3, #128	@ 0x80
 80015f0:	025b      	lsls	r3, r3, #9
 80015f2:	4013      	ands	r3, r2
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015fe:	4909      	ldr	r1, [pc, #36]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	40da      	lsrs	r2, r3
 8001614:	1e13      	subs	r3, r2, #0
 8001616:	d000      	beq.n	800161a <HAL_GPIO_Init+0x2ae>
 8001618:	e6b0      	b.n	800137c <HAL_GPIO_Init+0x10>
  }
}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b006      	add	sp, #24
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021800 	.word	0x40021800
 8001628:	50000400 	.word	0x50000400
 800162c:	50000800 	.word	0x50000800
 8001630:	50000c00 	.word	0x50000c00

08001634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e04a      	b.n	80016dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	223d      	movs	r2, #61	@ 0x3d
 800164a:	5c9b      	ldrb	r3, [r3, r2]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d107      	bne.n	8001662 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	223c      	movs	r2, #60	@ 0x3c
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff fc37 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	223d      	movs	r2, #61	@ 0x3d
 8001666:	2102      	movs	r1, #2
 8001668:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	0019      	movs	r1, r3
 8001674:	0010      	movs	r0, r2
 8001676:	f000 fb43 	bl	8001d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2248      	movs	r2, #72	@ 0x48
 800167e:	2101      	movs	r1, #1
 8001680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	223e      	movs	r2, #62	@ 0x3e
 8001686:	2101      	movs	r1, #1
 8001688:	5499      	strb	r1, [r3, r2]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	223f      	movs	r2, #63	@ 0x3f
 800168e:	2101      	movs	r1, #1
 8001690:	5499      	strb	r1, [r3, r2]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2240      	movs	r2, #64	@ 0x40
 8001696:	2101      	movs	r1, #1
 8001698:	5499      	strb	r1, [r3, r2]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2241      	movs	r2, #65	@ 0x41
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2242      	movs	r2, #66	@ 0x42
 80016a6:	2101      	movs	r1, #1
 80016a8:	5499      	strb	r1, [r3, r2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2243      	movs	r2, #67	@ 0x43
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2244      	movs	r2, #68	@ 0x44
 80016b6:	2101      	movs	r1, #1
 80016b8:	5499      	strb	r1, [r3, r2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2245      	movs	r2, #69	@ 0x45
 80016be:	2101      	movs	r1, #1
 80016c0:	5499      	strb	r1, [r3, r2]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2246      	movs	r2, #70	@ 0x46
 80016c6:	2101      	movs	r1, #1
 80016c8:	5499      	strb	r1, [r3, r2]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2247      	movs	r2, #71	@ 0x47
 80016ce:	2101      	movs	r1, #1
 80016d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	223d      	movs	r2, #61	@ 0x3d
 80016d6:	2101      	movs	r1, #1
 80016d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b002      	add	sp, #8
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e04a      	b.n	800178c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	223d      	movs	r2, #61	@ 0x3d
 80016fa:	5c9b      	ldrb	r3, [r3, r2]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d107      	bne.n	8001712 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	223c      	movs	r2, #60	@ 0x3c
 8001706:	2100      	movs	r1, #0
 8001708:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	0018      	movs	r0, r3
 800170e:	f000 f841 	bl	8001794 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	223d      	movs	r2, #61	@ 0x3d
 8001716:	2102      	movs	r1, #2
 8001718:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	0019      	movs	r1, r3
 8001724:	0010      	movs	r0, r2
 8001726:	f000 faeb 	bl	8001d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2248      	movs	r2, #72	@ 0x48
 800172e:	2101      	movs	r1, #1
 8001730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	223e      	movs	r2, #62	@ 0x3e
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	223f      	movs	r2, #63	@ 0x3f
 800173e:	2101      	movs	r1, #1
 8001740:	5499      	strb	r1, [r3, r2]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2240      	movs	r2, #64	@ 0x40
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2241      	movs	r2, #65	@ 0x41
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2242      	movs	r2, #66	@ 0x42
 8001756:	2101      	movs	r1, #1
 8001758:	5499      	strb	r1, [r3, r2]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2243      	movs	r2, #67	@ 0x43
 800175e:	2101      	movs	r1, #1
 8001760:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2244      	movs	r2, #68	@ 0x44
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2245      	movs	r2, #69	@ 0x45
 800176e:	2101      	movs	r1, #1
 8001770:	5499      	strb	r1, [r3, r2]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2246      	movs	r2, #70	@ 0x46
 8001776:	2101      	movs	r1, #1
 8001778:	5499      	strb	r1, [r3, r2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2247      	movs	r2, #71	@ 0x47
 800177e:	2101      	movs	r1, #1
 8001780:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	223d      	movs	r2, #61	@ 0x3d
 8001786:	2101      	movs	r1, #1
 8001788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <HAL_TIM_PWM_Start+0x22>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	223e      	movs	r2, #62	@ 0x3e
 80017b8:	5c9b      	ldrb	r3, [r3, r2]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	4193      	sbcs	r3, r2
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	e037      	b.n	8001836 <HAL_TIM_PWM_Start+0x92>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d108      	bne.n	80017de <HAL_TIM_PWM_Start+0x3a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	223f      	movs	r2, #63	@ 0x3f
 80017d0:	5c9b      	ldrb	r3, [r3, r2]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	4193      	sbcs	r3, r2
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	e02b      	b.n	8001836 <HAL_TIM_PWM_Start+0x92>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d108      	bne.n	80017f6 <HAL_TIM_PWM_Start+0x52>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2240      	movs	r2, #64	@ 0x40
 80017e8:	5c9b      	ldrb	r3, [r3, r2]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	4193      	sbcs	r3, r2
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	e01f      	b.n	8001836 <HAL_TIM_PWM_Start+0x92>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b0c      	cmp	r3, #12
 80017fa:	d108      	bne.n	800180e <HAL_TIM_PWM_Start+0x6a>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2241      	movs	r2, #65	@ 0x41
 8001800:	5c9b      	ldrb	r3, [r3, r2]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	1e5a      	subs	r2, r3, #1
 8001808:	4193      	sbcs	r3, r2
 800180a:	b2db      	uxtb	r3, r3
 800180c:	e013      	b.n	8001836 <HAL_TIM_PWM_Start+0x92>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b10      	cmp	r3, #16
 8001812:	d108      	bne.n	8001826 <HAL_TIM_PWM_Start+0x82>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2242      	movs	r2, #66	@ 0x42
 8001818:	5c9b      	ldrb	r3, [r3, r2]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	3b01      	subs	r3, #1
 800181e:	1e5a      	subs	r2, r3, #1
 8001820:	4193      	sbcs	r3, r2
 8001822:	b2db      	uxtb	r3, r3
 8001824:	e007      	b.n	8001836 <HAL_TIM_PWM_Start+0x92>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2243      	movs	r2, #67	@ 0x43
 800182a:	5c9b      	ldrb	r3, [r3, r2]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	4193      	sbcs	r3, r2
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07b      	b.n	8001936 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <HAL_TIM_PWM_Start+0xaa>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	223e      	movs	r2, #62	@ 0x3e
 8001848:	2102      	movs	r1, #2
 800184a:	5499      	strb	r1, [r3, r2]
 800184c:	e023      	b.n	8001896 <HAL_TIM_PWM_Start+0xf2>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d104      	bne.n	800185e <HAL_TIM_PWM_Start+0xba>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	223f      	movs	r2, #63	@ 0x3f
 8001858:	2102      	movs	r1, #2
 800185a:	5499      	strb	r1, [r3, r2]
 800185c:	e01b      	b.n	8001896 <HAL_TIM_PWM_Start+0xf2>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d104      	bne.n	800186e <HAL_TIM_PWM_Start+0xca>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2240      	movs	r2, #64	@ 0x40
 8001868:	2102      	movs	r1, #2
 800186a:	5499      	strb	r1, [r3, r2]
 800186c:	e013      	b.n	8001896 <HAL_TIM_PWM_Start+0xf2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d104      	bne.n	800187e <HAL_TIM_PWM_Start+0xda>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2241      	movs	r2, #65	@ 0x41
 8001878:	2102      	movs	r1, #2
 800187a:	5499      	strb	r1, [r3, r2]
 800187c:	e00b      	b.n	8001896 <HAL_TIM_PWM_Start+0xf2>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b10      	cmp	r3, #16
 8001882:	d104      	bne.n	800188e <HAL_TIM_PWM_Start+0xea>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2242      	movs	r2, #66	@ 0x42
 8001888:	2102      	movs	r1, #2
 800188a:	5499      	strb	r1, [r3, r2]
 800188c:	e003      	b.n	8001896 <HAL_TIM_PWM_Start+0xf2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2243      	movs	r2, #67	@ 0x43
 8001892:	2102      	movs	r1, #2
 8001894:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	2201      	movs	r2, #1
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fde0 	bl	8002464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a25      	ldr	r2, [pc, #148]	@ (8001940 <HAL_TIM_PWM_Start+0x19c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d009      	beq.n	80018c2 <HAL_TIM_PWM_Start+0x11e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a24      	ldr	r2, [pc, #144]	@ (8001944 <HAL_TIM_PWM_Start+0x1a0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d004      	beq.n	80018c2 <HAL_TIM_PWM_Start+0x11e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a22      	ldr	r2, [pc, #136]	@ (8001948 <HAL_TIM_PWM_Start+0x1a4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_PWM_Start+0x122>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_TIM_PWM_Start+0x124>
 80018c6:	2300      	movs	r3, #0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2180      	movs	r1, #128	@ 0x80
 80018d8:	0209      	lsls	r1, r1, #8
 80018da:	430a      	orrs	r2, r1
 80018dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a17      	ldr	r2, [pc, #92]	@ (8001940 <HAL_TIM_PWM_Start+0x19c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d004      	beq.n	80018f2 <HAL_TIM_PWM_Start+0x14e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a17      	ldr	r2, [pc, #92]	@ (800194c <HAL_TIM_PWM_Start+0x1a8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d116      	bne.n	8001920 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a15      	ldr	r2, [pc, #84]	@ (8001950 <HAL_TIM_PWM_Start+0x1ac>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b06      	cmp	r3, #6
 8001902:	d016      	beq.n	8001932 <HAL_TIM_PWM_Start+0x18e>
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	429a      	cmp	r2, r3
 800190c:	d011      	beq.n	8001932 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800191e:	e008      	b.n	8001932 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2101      	movs	r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e000      	b.n	8001934 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001932:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	40012c00 	.word	0x40012c00
 8001944:	40014400 	.word	0x40014400
 8001948:	40014800 	.word	0x40014800
 800194c:	40000400 	.word	0x40000400
 8001950:	00010007 	.word	0x00010007

08001954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2317      	movs	r3, #23
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	223c      	movs	r2, #60	@ 0x3c
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001972:	2302      	movs	r3, #2
 8001974:	e0e5      	b.n	8001b42 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	223c      	movs	r2, #60	@ 0x3c
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b14      	cmp	r3, #20
 8001982:	d900      	bls.n	8001986 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001984:	e0d1      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	009a      	lsls	r2, r3, #2
 800198a:	4b70      	ldr	r3, [pc, #448]	@ (8001b4c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800198c:	18d3      	adds	r3, r2, r3
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	0011      	movs	r1, r2
 800199a:	0018      	movs	r0, r3
 800199c:	f000 fa2a 	bl	8001df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2108      	movs	r1, #8
 80019ac:	430a      	orrs	r2, r1
 80019ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2104      	movs	r1, #4
 80019bc:	438a      	bics	r2, r1
 80019be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6999      	ldr	r1, [r3, #24]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	619a      	str	r2, [r3, #24]
      break;
 80019d2:	e0af      	b.n	8001b34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	0011      	movs	r1, r2
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 fa89 	bl	8001ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2180      	movs	r1, #128	@ 0x80
 80019ee:	0109      	lsls	r1, r1, #4
 80019f0:	430a      	orrs	r2, r1
 80019f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4954      	ldr	r1, [pc, #336]	@ (8001b50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001a00:	400a      	ands	r2, r1
 8001a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6999      	ldr	r1, [r3, #24]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	021a      	lsls	r2, r3, #8
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	619a      	str	r2, [r3, #24]
      break;
 8001a18:	e08c      	b.n	8001b34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	0011      	movs	r1, r2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 fae4 	bl	8001ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2108      	movs	r1, #8
 8001a34:	430a      	orrs	r2, r1
 8001a36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	69da      	ldr	r2, [r3, #28]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2104      	movs	r1, #4
 8001a44:	438a      	bics	r2, r1
 8001a46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	69d9      	ldr	r1, [r3, #28]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	61da      	str	r2, [r3, #28]
      break;
 8001a5a:	e06b      	b.n	8001b34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 fb45 	bl	80020f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	0109      	lsls	r1, r1, #4
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4932      	ldr	r1, [pc, #200]	@ (8001b50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69d9      	ldr	r1, [r3, #28]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	021a      	lsls	r2, r3, #8
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	61da      	str	r2, [r3, #28]
      break;
 8001aa0:	e048      	b.n	8001b34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 fb86 	bl	80021bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2108      	movs	r1, #8
 8001abc:	430a      	orrs	r2, r1
 8001abe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2104      	movs	r1, #4
 8001acc:	438a      	bics	r2, r1
 8001ace:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001ae2:	e027      	b.n	8001b34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	0011      	movs	r1, r2
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 fbbf 	bl	8002270 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	0109      	lsls	r1, r1, #4
 8001b00:	430a      	orrs	r2, r1
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4910      	ldr	r1, [pc, #64]	@ (8001b50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	021a      	lsls	r2, r3, #8
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001b28:	e004      	b.n	8001b34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001b2a:	2317      	movs	r3, #23
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
      break;
 8001b32:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	223c      	movs	r2, #60	@ 0x3c
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]

  return status;
 8001b3c:	2317      	movs	r3, #23
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	781b      	ldrb	r3, [r3, #0]
}
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b006      	add	sp, #24
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	08002f80 	.word	0x08002f80
 8001b50:	fffffbff 	.word	0xfffffbff

08001b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5e:	230f      	movs	r3, #15
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	223c      	movs	r2, #60	@ 0x3c
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_TIM_ConfigClockSource+0x20>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0bc      	b.n	8001cee <HAL_TIM_ConfigClockSource+0x19a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	223c      	movs	r2, #60	@ 0x3c
 8001b78:	2101      	movs	r1, #1
 8001b7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	223d      	movs	r2, #61	@ 0x3d
 8001b80:	2102      	movs	r1, #2
 8001b82:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4a59      	ldr	r2, [pc, #356]	@ (8001cfc <HAL_TIM_ConfigClockSource+0x1a8>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	0192      	lsls	r2, r2, #6
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d040      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0xde>
 8001bb0:	2280      	movs	r2, #128	@ 0x80
 8001bb2:	0192      	lsls	r2, r2, #6
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d900      	bls.n	8001bba <HAL_TIM_ConfigClockSource+0x66>
 8001bb8:	e088      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x178>
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	0152      	lsls	r2, r2, #5
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d100      	bne.n	8001bc4 <HAL_TIM_ConfigClockSource+0x70>
 8001bc2:	e088      	b.n	8001cd6 <HAL_TIM_ConfigClockSource+0x182>
 8001bc4:	2280      	movs	r2, #128	@ 0x80
 8001bc6:	0152      	lsls	r2, r2, #5
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d900      	bls.n	8001bce <HAL_TIM_ConfigClockSource+0x7a>
 8001bcc:	e07e      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x178>
 8001bce:	2b70      	cmp	r3, #112	@ 0x70
 8001bd0:	d018      	beq.n	8001c04 <HAL_TIM_ConfigClockSource+0xb0>
 8001bd2:	d900      	bls.n	8001bd6 <HAL_TIM_ConfigClockSource+0x82>
 8001bd4:	e07a      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x178>
 8001bd6:	2b60      	cmp	r3, #96	@ 0x60
 8001bd8:	d04f      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x126>
 8001bda:	d900      	bls.n	8001bde <HAL_TIM_ConfigClockSource+0x8a>
 8001bdc:	e076      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x178>
 8001bde:	2b50      	cmp	r3, #80	@ 0x50
 8001be0:	d03b      	beq.n	8001c5a <HAL_TIM_ConfigClockSource+0x106>
 8001be2:	d900      	bls.n	8001be6 <HAL_TIM_ConfigClockSource+0x92>
 8001be4:	e072      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x178>
 8001be6:	2b40      	cmp	r3, #64	@ 0x40
 8001be8:	d057      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x146>
 8001bea:	d900      	bls.n	8001bee <HAL_TIM_ConfigClockSource+0x9a>
 8001bec:	e06e      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x178>
 8001bee:	2b30      	cmp	r3, #48	@ 0x30
 8001bf0:	d063      	beq.n	8001cba <HAL_TIM_ConfigClockSource+0x166>
 8001bf2:	d86b      	bhi.n	8001ccc <HAL_TIM_ConfigClockSource+0x178>
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d060      	beq.n	8001cba <HAL_TIM_ConfigClockSource+0x166>
 8001bf8:	d868      	bhi.n	8001ccc <HAL_TIM_ConfigClockSource+0x178>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d05d      	beq.n	8001cba <HAL_TIM_ConfigClockSource+0x166>
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d05b      	beq.n	8001cba <HAL_TIM_ConfigClockSource+0x166>
 8001c02:	e063      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c14:	f000 fc06 	bl	8002424 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2277      	movs	r2, #119	@ 0x77
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	609a      	str	r2, [r3, #8]
      break;
 8001c30:	e052      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c42:	f000 fbef 	bl	8002424 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2180      	movs	r1, #128	@ 0x80
 8001c52:	01c9      	lsls	r1, r1, #7
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
      break;
 8001c58:	e03e      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c66:	001a      	movs	r2, r3
 8001c68:	f000 fb60 	bl	800232c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2150      	movs	r1, #80	@ 0x50
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 fbba 	bl	80023ec <TIM_ITRx_SetConfig>
      break;
 8001c78:	e02e      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c86:	001a      	movs	r2, r3
 8001c88:	f000 fb7e 	bl	8002388 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2160      	movs	r1, #96	@ 0x60
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 fbaa 	bl	80023ec <TIM_ITRx_SetConfig>
      break;
 8001c98:	e01e      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	f000 fb40 	bl	800232c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2140      	movs	r1, #64	@ 0x40
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 fb9a 	bl	80023ec <TIM_ITRx_SetConfig>
      break;
 8001cb8:	e00e      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	0010      	movs	r0, r2
 8001cc6:	f000 fb91 	bl	80023ec <TIM_ITRx_SetConfig>
      break;
 8001cca:	e005      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001ccc:	230f      	movs	r3, #15
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
      break;
 8001cd4:	e000      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001cd6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	223d      	movs	r2, #61	@ 0x3d
 8001cdc:	2101      	movs	r1, #1
 8001cde:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	223c      	movs	r2, #60	@ 0x3c
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	5499      	strb	r1, [r3, r2]

  return status;
 8001ce8:	230f      	movs	r3, #15
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	781b      	ldrb	r3, [r3, #0]
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b004      	add	sp, #16
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	ffceff88 	.word	0xffceff88
 8001cfc:	ffff00ff 	.word	0xffff00ff

08001d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a32      	ldr	r2, [pc, #200]	@ (8001ddc <TIM_Base_SetConfig+0xdc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0x20>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a31      	ldr	r2, [pc, #196]	@ (8001de0 <TIM_Base_SetConfig+0xe0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2270      	movs	r2, #112	@ 0x70
 8001d24:	4393      	bics	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a29      	ldr	r2, [pc, #164]	@ (8001ddc <TIM_Base_SetConfig+0xdc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00f      	beq.n	8001d5a <TIM_Base_SetConfig+0x5a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a28      	ldr	r2, [pc, #160]	@ (8001de0 <TIM_Base_SetConfig+0xe0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00b      	beq.n	8001d5a <TIM_Base_SetConfig+0x5a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a27      	ldr	r2, [pc, #156]	@ (8001de4 <TIM_Base_SetConfig+0xe4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <TIM_Base_SetConfig+0x5a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a26      	ldr	r2, [pc, #152]	@ (8001de8 <TIM_Base_SetConfig+0xe8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d003      	beq.n	8001d5a <TIM_Base_SetConfig+0x5a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a25      	ldr	r2, [pc, #148]	@ (8001dec <TIM_Base_SetConfig+0xec>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d108      	bne.n	8001d6c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a24      	ldr	r2, [pc, #144]	@ (8001df0 <TIM_Base_SetConfig+0xf0>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2280      	movs	r2, #128	@ 0x80
 8001d70:	4393      	bics	r3, r2
 8001d72:	001a      	movs	r2, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a11      	ldr	r2, [pc, #68]	@ (8001ddc <TIM_Base_SetConfig+0xdc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <TIM_Base_SetConfig+0xaa>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a12      	ldr	r2, [pc, #72]	@ (8001de8 <TIM_Base_SetConfig+0xe8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d003      	beq.n	8001daa <TIM_Base_SetConfig+0xaa>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a11      	ldr	r2, [pc, #68]	@ (8001dec <TIM_Base_SetConfig+0xec>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d103      	bne.n	8001db2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4393      	bics	r3, r2
 8001dcc:	001a      	movs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	611a      	str	r2, [r3, #16]
  }
}
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b004      	add	sp, #16
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40002000 	.word	0x40002000
 8001de8:	40014400 	.word	0x40014400
 8001dec:	40014800 	.word	0x40014800
 8001df0:	fffffcff 	.word	0xfffffcff

08001df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a2e      	ldr	r2, [pc, #184]	@ (8001edc <TIM_OC1_SetConfig+0xe8>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	4393      	bics	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a24      	ldr	r2, [pc, #144]	@ (8001ee0 <TIM_OC1_SetConfig+0xec>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <TIM_OC1_SetConfig+0x6e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a23      	ldr	r2, [pc, #140]	@ (8001ee4 <TIM_OC1_SetConfig+0xf0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d003      	beq.n	8001e62 <TIM_OC1_SetConfig+0x6e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ee8 <TIM_OC1_SetConfig+0xf4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10c      	bne.n	8001e7c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2208      	movs	r2, #8
 8001e66:	4393      	bics	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2204      	movs	r2, #4
 8001e78:	4393      	bics	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <TIM_OC1_SetConfig+0xec>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <TIM_OC1_SetConfig+0xa0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a17      	ldr	r2, [pc, #92]	@ (8001ee4 <TIM_OC1_SetConfig+0xf0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d003      	beq.n	8001e94 <TIM_OC1_SetConfig+0xa0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ee8 <TIM_OC1_SetConfig+0xf4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d111      	bne.n	8001eb8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4a15      	ldr	r2, [pc, #84]	@ (8001eec <TIM_OC1_SetConfig+0xf8>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4a14      	ldr	r2, [pc, #80]	@ (8001ef0 <TIM_OC1_SetConfig+0xfc>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	621a      	str	r2, [r3, #32]
}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b006      	add	sp, #24
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	fffeff8f 	.word	0xfffeff8f
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40014400 	.word	0x40014400
 8001ee8:	40014800 	.word	0x40014800
 8001eec:	fffffeff 	.word	0xfffffeff
 8001ef0:	fffffdff 	.word	0xfffffdff

08001ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd4 <TIM_OC2_SetConfig+0xe0>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd8 <TIM_OC2_SetConfig+0xe4>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	4393      	bics	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a22      	ldr	r2, [pc, #136]	@ (8001fdc <TIM_OC2_SetConfig+0xe8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10d      	bne.n	8001f72 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2280      	movs	r2, #128	@ 0x80
 8001f5a:	4393      	bics	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2240      	movs	r2, #64	@ 0x40
 8001f6e:	4393      	bics	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <TIM_OC2_SetConfig+0xe8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d007      	beq.n	8001f8a <TIM_OC2_SetConfig+0x96>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a18      	ldr	r2, [pc, #96]	@ (8001fe0 <TIM_OC2_SetConfig+0xec>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d003      	beq.n	8001f8a <TIM_OC2_SetConfig+0x96>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <TIM_OC2_SetConfig+0xf0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d113      	bne.n	8001fb2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4a16      	ldr	r2, [pc, #88]	@ (8001fe8 <TIM_OC2_SetConfig+0xf4>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4a15      	ldr	r2, [pc, #84]	@ (8001fec <TIM_OC2_SetConfig+0xf8>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	621a      	str	r2, [r3, #32]
}
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b006      	add	sp, #24
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	feff8fff 	.word	0xfeff8fff
 8001fd8:	fffffcff 	.word	0xfffffcff
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40014400 	.word	0x40014400
 8001fe4:	40014800 	.word	0x40014800
 8001fe8:	fffffbff 	.word	0xfffffbff
 8001fec:	fffff7ff 	.word	0xfffff7ff

08001ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a31      	ldr	r2, [pc, #196]	@ (80020cc <TIM_OC3_SetConfig+0xdc>)
 8002006:	401a      	ands	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a2d      	ldr	r2, [pc, #180]	@ (80020d0 <TIM_OC3_SetConfig+0xe0>)
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2203      	movs	r2, #3
 8002024:	4393      	bics	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	4a27      	ldr	r2, [pc, #156]	@ (80020d4 <TIM_OC3_SetConfig+0xe4>)
 8002036:	4013      	ands	r3, r2
 8002038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a23      	ldr	r2, [pc, #140]	@ (80020d8 <TIM_OC3_SetConfig+0xe8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10d      	bne.n	800206a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4a22      	ldr	r2, [pc, #136]	@ (80020dc <TIM_OC3_SetConfig+0xec>)
 8002052:	4013      	ands	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4a1e      	ldr	r2, [pc, #120]	@ (80020e0 <TIM_OC3_SetConfig+0xf0>)
 8002066:	4013      	ands	r3, r2
 8002068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a1a      	ldr	r2, [pc, #104]	@ (80020d8 <TIM_OC3_SetConfig+0xe8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <TIM_OC3_SetConfig+0x92>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1b      	ldr	r2, [pc, #108]	@ (80020e4 <TIM_OC3_SetConfig+0xf4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d003      	beq.n	8002082 <TIM_OC3_SetConfig+0x92>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1a      	ldr	r2, [pc, #104]	@ (80020e8 <TIM_OC3_SetConfig+0xf8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d113      	bne.n	80020aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4a19      	ldr	r2, [pc, #100]	@ (80020ec <TIM_OC3_SetConfig+0xfc>)
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4a18      	ldr	r2, [pc, #96]	@ (80020f0 <TIM_OC3_SetConfig+0x100>)
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	621a      	str	r2, [r3, #32]
}
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b006      	add	sp, #24
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	fffffeff 	.word	0xfffffeff
 80020d0:	fffeff8f 	.word	0xfffeff8f
 80020d4:	fffffdff 	.word	0xfffffdff
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	fffff7ff 	.word	0xfffff7ff
 80020e0:	fffffbff 	.word	0xfffffbff
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800
 80020ec:	ffffefff 	.word	0xffffefff
 80020f0:	ffffdfff 	.word	0xffffdfff

080020f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a24      	ldr	r2, [pc, #144]	@ (800219c <TIM_OC4_SetConfig+0xa8>)
 800210a:	401a      	ands	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a20      	ldr	r2, [pc, #128]	@ (80021a0 <TIM_OC4_SetConfig+0xac>)
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a1f      	ldr	r2, [pc, #124]	@ (80021a4 <TIM_OC4_SetConfig+0xb0>)
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4a1b      	ldr	r2, [pc, #108]	@ (80021a8 <TIM_OC4_SetConfig+0xb4>)
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	031b      	lsls	r3, r3, #12
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <TIM_OC4_SetConfig+0xb8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <TIM_OC4_SetConfig+0x70>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a16      	ldr	r2, [pc, #88]	@ (80021b0 <TIM_OC4_SetConfig+0xbc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <TIM_OC4_SetConfig+0x70>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a15      	ldr	r2, [pc, #84]	@ (80021b4 <TIM_OC4_SetConfig+0xc0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d109      	bne.n	8002178 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <TIM_OC4_SetConfig+0xc4>)
 8002168:	4013      	ands	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	621a      	str	r2, [r3, #32]
}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	b006      	add	sp, #24
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	ffffefff 	.word	0xffffefff
 80021a0:	feff8fff 	.word	0xfeff8fff
 80021a4:	fffffcff 	.word	0xfffffcff
 80021a8:	ffffdfff 	.word	0xffffdfff
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	40014400 	.word	0x40014400
 80021b4:	40014800 	.word	0x40014800
 80021b8:	ffffbfff 	.word	0xffffbfff

080021bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a21      	ldr	r2, [pc, #132]	@ (8002258 <TIM_OC5_SetConfig+0x9c>)
 80021d2:	401a      	ands	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	@ (800225c <TIM_OC5_SetConfig+0xa0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4a19      	ldr	r2, [pc, #100]	@ (8002260 <TIM_OC5_SetConfig+0xa4>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a15      	ldr	r2, [pc, #84]	@ (8002264 <TIM_OC5_SetConfig+0xa8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <TIM_OC5_SetConfig+0x66>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a14      	ldr	r2, [pc, #80]	@ (8002268 <TIM_OC5_SetConfig+0xac>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d003      	beq.n	8002222 <TIM_OC5_SetConfig+0x66>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a13      	ldr	r2, [pc, #76]	@ (800226c <TIM_OC5_SetConfig+0xb0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d109      	bne.n	8002236 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4a0c      	ldr	r2, [pc, #48]	@ (8002258 <TIM_OC5_SetConfig+0x9c>)
 8002226:	4013      	ands	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	621a      	str	r2, [r3, #32]
}
 8002250:	46c0      	nop			@ (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b006      	add	sp, #24
 8002256:	bd80      	pop	{r7, pc}
 8002258:	fffeffff 	.word	0xfffeffff
 800225c:	fffeff8f 	.word	0xfffeff8f
 8002260:	fffdffff 	.word	0xfffdffff
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40014400 	.word	0x40014400
 800226c:	40014800 	.word	0x40014800

08002270 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <TIM_OC6_SetConfig+0xa0>)
 8002286:	401a      	ands	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <TIM_OC6_SetConfig+0xa4>)
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002318 <TIM_OC6_SetConfig+0xa8>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	051b      	lsls	r3, r3, #20
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a16      	ldr	r2, [pc, #88]	@ (800231c <TIM_OC6_SetConfig+0xac>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d007      	beq.n	80022d8 <TIM_OC6_SetConfig+0x68>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a15      	ldr	r2, [pc, #84]	@ (8002320 <TIM_OC6_SetConfig+0xb0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d003      	beq.n	80022d8 <TIM_OC6_SetConfig+0x68>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <TIM_OC6_SetConfig+0xb4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d109      	bne.n	80022ec <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4a13      	ldr	r2, [pc, #76]	@ (8002328 <TIM_OC6_SetConfig+0xb8>)
 80022dc:	4013      	ands	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	621a      	str	r2, [r3, #32]
}
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b006      	add	sp, #24
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	ffefffff 	.word	0xffefffff
 8002314:	feff8fff 	.word	0xfeff8fff
 8002318:	ffdfffff 	.word	0xffdfffff
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40014400 	.word	0x40014400
 8002324:	40014800 	.word	0x40014800
 8002328:	fffbffff 	.word	0xfffbffff

0800232c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	2201      	movs	r2, #1
 8002344:	4393      	bics	r3, r2
 8002346:	001a      	movs	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	22f0      	movs	r2, #240	@ 0xf0
 8002356:	4393      	bics	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	220a      	movs	r2, #10
 8002368:	4393      	bics	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	621a      	str	r2, [r3, #32]
}
 8002380:	46c0      	nop			@ (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b006      	add	sp, #24
 8002386:	bd80      	pop	{r7, pc}

08002388 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	2210      	movs	r2, #16
 80023a0:	4393      	bics	r3, r2
 80023a2:	001a      	movs	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	@ (80023e8 <TIM_TI2_ConfigInputStage+0x60>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	031b      	lsls	r3, r3, #12
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	22a0      	movs	r2, #160	@ 0xa0
 80023c4:	4393      	bics	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	621a      	str	r2, [r3, #32]
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b006      	add	sp, #24
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	ffff0fff 	.word	0xffff0fff

080023ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a08      	ldr	r2, [pc, #32]	@ (8002420 <TIM_ITRx_SetConfig+0x34>)
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	2207      	movs	r2, #7
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	609a      	str	r2, [r3, #8]
}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b004      	add	sp, #16
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	ffcfff8f 	.word	0xffcfff8f

08002424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	4a09      	ldr	r2, [pc, #36]	@ (8002460 <TIM_ETR_SetConfig+0x3c>)
 800243c:	4013      	ands	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	021a      	lsls	r2, r3, #8
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	431a      	orrs	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4313      	orrs	r3, r2
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	609a      	str	r2, [r3, #8]
}
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b006      	add	sp, #24
 800245e:	bd80      	pop	{r7, pc}
 8002460:	ffff00ff 	.word	0xffff00ff

08002464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	221f      	movs	r2, #31
 8002474:	4013      	ands	r3, r2
 8002476:	2201      	movs	r2, #1
 8002478:	409a      	lsls	r2, r3
 800247a:	0013      	movs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	43d2      	mvns	r2, r2
 8002486:	401a      	ands	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	211f      	movs	r1, #31
 8002494:	400b      	ands	r3, r1
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4099      	lsls	r1, r3
 800249a:	000b      	movs	r3, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	621a      	str	r2, [r3, #32]
}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b006      	add	sp, #24
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	223c      	movs	r2, #60	@ 0x3c
 80024ba:	5c9b      	ldrb	r3, [r3, r2]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e04a      	b.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	223c      	movs	r2, #60	@ 0x3c
 80024c8:	2101      	movs	r1, #1
 80024ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	223d      	movs	r2, #61	@ 0x3d
 80024d0:	2102      	movs	r1, #2
 80024d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d108      	bne.n	8002500 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2270      	movs	r2, #112	@ 0x70
 8002504:	4393      	bics	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a11      	ldr	r2, [pc, #68]	@ (8002564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d004      	beq.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a10      	ldr	r2, [pc, #64]	@ (800256c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10c      	bne.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2280      	movs	r2, #128	@ 0x80
 8002532:	4393      	bics	r3, r2
 8002534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	4313      	orrs	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	223d      	movs	r2, #61	@ 0x3d
 800254c:	2101      	movs	r1, #1
 800254e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	223c      	movs	r2, #60	@ 0x3c
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	40012c00 	.word	0x40012c00
 8002568:	ff0fffff 	.word	0xff0fffff
 800256c:	40000400 	.word	0x40000400

08002570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	223c      	movs	r2, #60	@ 0x3c
 8002582:	5c9b      	ldrb	r3, [r3, r2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002588:	2302      	movs	r3, #2
 800258a:	e06f      	b.n	800266c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	223c      	movs	r2, #60	@ 0x3c
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	22ff      	movs	r2, #255	@ 0xff
 8002598:	4393      	bics	r3, r2
 800259a:	001a      	movs	r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a33      	ldr	r2, [pc, #204]	@ (8002674 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80025a8:	401a      	ands	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a30      	ldr	r2, [pc, #192]	@ (8002678 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80025b6:	401a      	ands	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a2e      	ldr	r2, [pc, #184]	@ (800267c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80025c4:	401a      	ands	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002680 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80025d2:	401a      	ands	r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a29      	ldr	r2, [pc, #164]	@ (8002684 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80025e0:	401a      	ands	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4a26      	ldr	r2, [pc, #152]	@ (8002688 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80025ee:	401a      	ands	r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a24      	ldr	r2, [pc, #144]	@ (800268c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80025fc:	401a      	ands	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a21      	ldr	r2, [pc, #132]	@ (8002690 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800260c:	401a      	ands	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1e      	ldr	r2, [pc, #120]	@ (8002694 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d11c      	bne.n	800265a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002624:	401a      	ands	r2, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	051b      	lsls	r3, r3, #20
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a1a      	ldr	r2, [pc, #104]	@ (800269c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002634:	401a      	ands	r2, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002642:	401a      	ands	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002650:	401a      	ands	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223c      	movs	r2, #60	@ 0x3c
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b004      	add	sp, #16
 8002672:	bd80      	pop	{r7, pc}
 8002674:	fffffcff 	.word	0xfffffcff
 8002678:	fffffbff 	.word	0xfffffbff
 800267c:	fffff7ff 	.word	0xfffff7ff
 8002680:	ffffefff 	.word	0xffffefff
 8002684:	ffffdfff 	.word	0xffffdfff
 8002688:	ffffbfff 	.word	0xffffbfff
 800268c:	fff0ffff 	.word	0xfff0ffff
 8002690:	efffffff 	.word	0xefffffff
 8002694:	40012c00 	.word	0x40012c00
 8002698:	ff0fffff 	.word	0xff0fffff
 800269c:	feffffff 	.word	0xfeffffff
 80026a0:	fdffffff 	.word	0xfdffffff
 80026a4:	dfffffff 	.word	0xdfffffff

080026a8 <LL_GPIO_SetPinMode>:
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	435b      	muls	r3, r3
 80026bc:	001a      	movs	r2, r3
 80026be:	0013      	movs	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	189b      	adds	r3, r3, r2
 80026c4:	43db      	mvns	r3, r3
 80026c6:	400b      	ands	r3, r1
 80026c8:	001a      	movs	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	435b      	muls	r3, r3
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	434b      	muls	r3, r1
 80026d2:	431a      	orrs	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	601a      	str	r2, [r3, #0]
}
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b004      	add	sp, #16
 80026de:	bd80      	pop	{r7, pc}

080026e0 <LL_GPIO_SetPinOutputType>:
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	43d2      	mvns	r2, r2
 80026f4:	401a      	ands	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	434b      	muls	r3, r1
 80026fc:	431a      	orrs	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	605a      	str	r2, [r3, #4]
}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}

0800270a <LL_GPIO_SetPinSpeed>:
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6899      	ldr	r1, [r3, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	435b      	muls	r3, r3
 800271e:	001a      	movs	r2, r3
 8002720:	0013      	movs	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	189b      	adds	r3, r3, r2
 8002726:	43db      	mvns	r3, r3
 8002728:	400b      	ands	r3, r1
 800272a:	001a      	movs	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	435b      	muls	r3, r3
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	434b      	muls	r3, r1
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b004      	add	sp, #16
 8002740:	bd80      	pop	{r7, pc}

08002742 <LL_GPIO_SetPinPull>:
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68d9      	ldr	r1, [r3, #12]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	435b      	muls	r3, r3
 8002756:	001a      	movs	r2, r3
 8002758:	0013      	movs	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	189b      	adds	r3, r3, r2
 800275e:	43db      	mvns	r3, r3
 8002760:	400b      	ands	r3, r1
 8002762:	001a      	movs	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	435b      	muls	r3, r3
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	434b      	muls	r3, r1
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	60da      	str	r2, [r3, #12]
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b004      	add	sp, #16
 8002778:	bd80      	pop	{r7, pc}

0800277a <LL_GPIO_SetAFPin_0_7>:
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a19      	ldr	r1, [r3, #32]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	435b      	muls	r3, r3
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	4353      	muls	r3, r2
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	435a      	muls	r2, r3
 8002796:	0013      	movs	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	43db      	mvns	r3, r3
 800279e:	400b      	ands	r3, r1
 80027a0:	001a      	movs	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	435b      	muls	r3, r3
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	434b      	muls	r3, r1
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	434b      	muls	r3, r1
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	434b      	muls	r3, r1
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	621a      	str	r2, [r3, #32]
}
 80027b8:	46c0      	nop			@ (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b004      	add	sp, #16
 80027be:	bd80      	pop	{r7, pc}

080027c0 <LL_GPIO_SetAFPin_8_15>:
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	0a12      	lsrs	r2, r2, #8
 80027d8:	4353      	muls	r3, r2
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	0a12      	lsrs	r2, r2, #8
 80027de:	4353      	muls	r3, r2
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	0a12      	lsrs	r2, r2, #8
 80027e4:	435a      	muls	r2, r3
 80027e6:	0013      	movs	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	43db      	mvns	r3, r3
 80027ee:	400b      	ands	r3, r1
 80027f0:	001a      	movs	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	0a09      	lsrs	r1, r1, #8
 80027fa:	434b      	muls	r3, r1
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	0a09      	lsrs	r1, r1, #8
 8002800:	434b      	muls	r3, r1
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	0a09      	lsrs	r1, r1, #8
 8002806:	434b      	muls	r3, r1
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	434b      	muls	r3, r1
 800280c:	431a      	orrs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b004      	add	sp, #16
 8002818:	bd80      	pop	{r7, pc}

0800281a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002828:	e047      	b.n	80028ba <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4091      	lsls	r1, r2
 8002834:	000a      	movs	r2, r1
 8002836:	4013      	ands	r3, r2
 8002838:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d039      	beq.n	80028b4 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d003      	beq.n	8002850 <LL_GPIO_Init+0x36>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d10d      	bne.n	800286c <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff ff56 	bl	800270a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f7ff ff3a 	bl	80026e0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f7ff ff64 	bl	8002742 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d111      	bne.n	80028a6 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2bff      	cmp	r3, #255	@ 0xff
 8002886:	d807      	bhi.n	8002898 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0018      	movs	r0, r3
 8002892:	f7ff ff72 	bl	800277a <LL_GPIO_SetAFPin_0_7>
 8002896:	e006      	b.n	80028a6 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ff8d 	bl	80027c0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7ff fefa 	bl	80026a8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3301      	adds	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	40da      	lsrs	r2, r3
 80028c2:	1e13      	subs	r3, r2, #0
 80028c4:	d1b1      	bne.n	800282a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b004      	add	sp, #16
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <LL_RCC_HSI_IsReady>:
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028d4:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <LL_RCC_HSI_IsReady+0x24>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	401a      	ands	r2, r3
 80028de:	2380      	movs	r3, #128	@ 0x80
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d101      	bne.n	80028ea <LL_RCC_HSI_IsReady+0x1a>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_RCC_HSI_IsReady+0x1c>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	40021000 	.word	0x40021000

080028f8 <LL_RCC_LSE_IsReady>:
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <LL_RCC_LSE_IsReady+0x1c>)
 80028fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d101      	bne.n	800290c <LL_RCC_LSE_IsReady+0x14>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <LL_RCC_LSE_IsReady+0x16>
 800290c:	2300      	movs	r3, #0
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000

08002918 <LL_RCC_GetSysClkSource>:
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <LL_RCC_GetSysClkSource+0x14>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2238      	movs	r2, #56	@ 0x38
 8002922:	4013      	ands	r3, r2
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	40021000 	.word	0x40021000

08002930 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002934:	4b03      	ldr	r3, [pc, #12]	@ (8002944 <LL_RCC_GetAHBPrescaler+0x14>)
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	23f0      	movs	r3, #240	@ 0xf0
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	4013      	ands	r3, r2
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000

08002948 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800294c:	4b03      	ldr	r3, [pc, #12]	@ (800295c <LL_RCC_GetAPB1Prescaler+0x14>)
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	23e0      	movs	r3, #224	@ 0xe0
 8002952:	01db      	lsls	r3, r3, #7
 8002954:	4013      	ands	r3, r2
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000

08002960 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <LL_RCC_GetUSARTClockSource+0x20>)
 800296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	401a      	ands	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	4313      	orrs	r3, r2
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b002      	add	sp, #8
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	40021000 	.word	0x40021000

08002984 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <LL_RCC_PLL_GetN+0x14>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	227f      	movs	r2, #127	@ 0x7f
 8002990:	4013      	ands	r3, r2
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000

0800299c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80029a0:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <LL_RCC_PLL_GetR+0x14>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0f5b      	lsrs	r3, r3, #29
 80029a6:	075b      	lsls	r3, r3, #29
}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000

080029b4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <LL_RCC_PLL_GetMainSource+0x14>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2203      	movs	r2, #3
 80029be:	4013      	ands	r3, r2
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	40021000 	.word	0x40021000

080029cc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029d0:	4b03      	ldr	r3, [pc, #12]	@ (80029e0 <LL_RCC_PLL_GetDivider+0x14>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2270      	movs	r2, #112	@ 0x70
 80029d6:	4013      	ands	r3, r2
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000

080029e4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80029ec:	f000 f866 	bl	8002abc <RCC_GetSystemClockFreq>
 80029f0:	0002      	movs	r2, r0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f88c 	bl	8002b18 <RCC_GetHCLKClockFreq>
 8002a00:	0002      	movs	r2, r0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 f89c 	bl	8002b48 <RCC_GetPCLK1ClockFreq>
 8002a10:	0002      	movs	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	609a      	str	r2, [r3, #8]
}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b002      	add	sp, #8
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d137      	bne.n	8002aa2 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff ff93 	bl	8002960 <LL_RCC_GetUSARTClockSource>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <LL_RCC_GetUSARTClockFreq+0x8c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d016      	beq.n	8002a70 <LL_RCC_GetUSARTClockFreq+0x50>
 8002a42:	4a1a      	ldr	r2, [pc, #104]	@ (8002aac <LL_RCC_GetUSARTClockFreq+0x8c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d81c      	bhi.n	8002a82 <LL_RCC_GetUSARTClockFreq+0x62>
 8002a48:	4a19      	ldr	r2, [pc, #100]	@ (8002ab0 <LL_RCC_GetUSARTClockFreq+0x90>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <LL_RCC_GetUSARTClockFreq+0x36>
 8002a4e:	4a19      	ldr	r2, [pc, #100]	@ (8002ab4 <LL_RCC_GetUSARTClockFreq+0x94>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d005      	beq.n	8002a60 <LL_RCC_GetUSARTClockFreq+0x40>
 8002a54:	e015      	b.n	8002a82 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002a56:	f000 f831 	bl	8002abc <RCC_GetSystemClockFreq>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	60fb      	str	r3, [r7, #12]
        break;
 8002a5e:	e020      	b.n	8002aa2 <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8002a60:	f7ff ff36 	bl	80028d0 <LL_RCC_HSI_IsReady>
 8002a64:	0003      	movs	r3, r0
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d118      	bne.n	8002a9c <LL_RCC_GetUSARTClockFreq+0x7c>
        {
          usart_frequency = HSI_VALUE;
 8002a6a:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <LL_RCC_GetUSARTClockFreq+0x98>)
 8002a6c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a6e:	e015      	b.n	8002a9c <LL_RCC_GetUSARTClockFreq+0x7c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8002a70:	f7ff ff42 	bl	80028f8 <LL_RCC_LSE_IsReady>
 8002a74:	0003      	movs	r3, r0
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d112      	bne.n	8002aa0 <LL_RCC_GetUSARTClockFreq+0x80>
        {
          usart_frequency = LSE_VALUE;
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a80:	e00e      	b.n	8002aa0 <LL_RCC_GetUSARTClockFreq+0x80>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002a82:	f000 f81b 	bl	8002abc <RCC_GetSystemClockFreq>
 8002a86:	0003      	movs	r3, r0
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f845 	bl	8002b18 <RCC_GetHCLKClockFreq>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	0018      	movs	r0, r3
 8002a92:	f000 f859 	bl	8002b48 <RCC_GetPCLK1ClockFreq>
 8002a96:	0003      	movs	r3, r0
 8002a98:	60fb      	str	r3, [r7, #12]
        break;
 8002a9a:	e002      	b.n	8002aa2 <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	e000      	b.n	8002aa2 <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8002aa0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	00030003 	.word	0x00030003
 8002ab0:	00030001 	.word	0x00030001
 8002ab4:	00030002 	.word	0x00030002
 8002ab8:	00f42400 	.word	0x00f42400

08002abc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002ac2:	f7ff ff29 	bl	8002918 <LL_RCC_GetSysClkSource>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d002      	beq.n	8002ad2 <RCC_GetSystemClockFreq+0x16>
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d003      	beq.n	8002ad8 <RCC_GetSystemClockFreq+0x1c>
 8002ad0:	e007      	b.n	8002ae2 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <RCC_GetSystemClockFreq+0x50>)
 8002ad4:	607b      	str	r3, [r7, #4]
      break;
 8002ad6:	e014      	b.n	8002b02 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002ad8:	f000 f84c 	bl	8002b74 <RCC_PLL_GetFreqDomain_SYS>
 8002adc:	0003      	movs	r3, r0
 8002ade:	607b      	str	r3, [r7, #4]
      break;
 8002ae0:	e00f      	b.n	8002b02 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <RCC_GetSystemClockFreq+0x54>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0adb      	lsrs	r3, r3, #11
 8002ae8:	2207      	movs	r2, #7
 8002aea:	4013      	ands	r3, r2
 8002aec:	2201      	movs	r2, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	4807      	ldr	r0, [pc, #28]	@ (8002b14 <RCC_GetSystemClockFreq+0x58>)
 8002af8:	f7fd fb02 	bl	8000100 <__udivsi3>
 8002afc:	0003      	movs	r3, r0
 8002afe:	607b      	str	r3, [r7, #4]
      break;
 8002b00:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 8002b02:	687b      	ldr	r3, [r7, #4]
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	007a1200 	.word	0x007a1200
 8002b10:	40021000 	.word	0x40021000
 8002b14:	00f42400 	.word	0x00f42400

08002b18 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002b20:	f7ff ff06 	bl	8002930 <LL_RCC_GetAHBPrescaler>
 8002b24:	0003      	movs	r3, r0
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	220f      	movs	r2, #15
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <RCC_GetHCLKClockFreq+0x2c>)
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	58d3      	ldr	r3, [r2, r3]
 8002b32:	221f      	movs	r2, #31
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	40da      	lsrs	r2, r3
 8002b3a:	0013      	movs	r3, r2
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	08002f20 	.word	0x08002f20

08002b48 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002b50:	f7ff fefa 	bl	8002948 <LL_RCC_GetAPB1Prescaler>
 8002b54:	0003      	movs	r3, r0
 8002b56:	0b1a      	lsrs	r2, r3, #12
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <RCC_GetPCLK1ClockFreq+0x28>)
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	58d3      	ldr	r3, [r2, r3]
 8002b5e:	221f      	movs	r2, #31
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	40da      	lsrs	r2, r3
 8002b66:	0013      	movs	r3, r2
}
 8002b68:	0018      	movs	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b002      	add	sp, #8
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	08002f60 	.word	0x08002f60

08002b74 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002b7a:	f7ff ff1b 	bl	80029b4 <LL_RCC_PLL_GetMainSource>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d003      	beq.n	8002b90 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d003      	beq.n	8002b96 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8002b8e:	e005      	b.n	8002b9c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002b92:	607b      	str	r3, [r7, #4]
      break;
 8002b94:	e005      	b.n	8002ba2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002b96:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8002b98:	607b      	str	r3, [r7, #4]
      break;
 8002b9a:	e002      	b.n	8002ba2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8002b9c:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002b9e:	607b      	str	r3, [r7, #4]
      break;
 8002ba0:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002ba2:	f7ff feef 	bl	8002984 <LL_RCC_PLL_GetN>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4353      	muls	r3, r2
 8002bac:	001c      	movs	r4, r3
 8002bae:	f7ff ff0d 	bl	80029cc <LL_RCC_PLL_GetDivider>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	0019      	movs	r1, r3
 8002bba:	0020      	movs	r0, r4
 8002bbc:	f7fd faa0 	bl	8000100 <__udivsi3>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	001c      	movs	r4, r3
 8002bc4:	f7ff feea 	bl	800299c <LL_RCC_PLL_GetR>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	0f5b      	lsrs	r3, r3, #29
 8002bcc:	3301      	adds	r3, #1
 8002bce:	0019      	movs	r1, r3
 8002bd0:	0020      	movs	r0, r4
 8002bd2:	f7fd fa95 	bl	8000100 <__udivsi3>
 8002bd6:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b003      	add	sp, #12
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <LL_USART_IsEnabled>:
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <LL_USART_IsEnabled+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_USART_IsEnabled+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <LL_USART_SetPrescaler>:
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	220f      	movs	r2, #15
 8002c1a:	4393      	bics	r3, r2
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	b292      	uxth	r2, r2
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b002      	add	sp, #8
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <LL_USART_SetStopBitsLength>:
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a05      	ldr	r2, [pc, #20]	@ (8002c54 <LL_USART_SetStopBitsLength+0x24>)
 8002c40:	401a      	ands	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	605a      	str	r2, [r3, #4]
}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b002      	add	sp, #8
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	ffffcfff 	.word	0xffffcfff

08002c58 <LL_USART_SetHWFlowCtrl>:
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	4a05      	ldr	r2, [pc, #20]	@ (8002c7c <LL_USART_SetHWFlowCtrl+0x24>)
 8002c68:	401a      	ands	r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]
}
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b002      	add	sp, #8
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	fffffcff 	.word	0xfffffcff

08002c80 <LL_USART_SetBaudRate>:
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b0b      	cmp	r3, #11
 8002c92:	d846      	bhi.n	8002d22 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d043      	beq.n	8002d22 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	2380      	movs	r3, #128	@ 0x80
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d126      	bne.n	8002cf2 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	001a      	movs	r2, r3
 8002caa:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <LL_USART_SetBaudRate+0xac>)
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	58d3      	ldr	r3, [r2, r3]
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	68b8      	ldr	r0, [r7, #8]
 8002cb4:	f7fd fa24 	bl	8000100 <__udivsi3>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	005a      	lsls	r2, r3, #1
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	18d3      	adds	r3, r2, r3
 8002cc2:	6a39      	ldr	r1, [r7, #32]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fd fa1b 	bl	8000100 <__udivsi3>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <LL_USART_SetBaudRate+0xb0>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	001a      	movs	r2, r3
 8002ce0:	2307      	movs	r3, #7
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	60da      	str	r2, [r3, #12]
}
 8002cf0:	e017      	b.n	8002d22 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <LL_USART_SetBaudRate+0xac>)
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	58d3      	ldr	r3, [r2, r3]
 8002cfe:	0019      	movs	r1, r3
 8002d00:	68b8      	ldr	r0, [r7, #8]
 8002d02:	f7fd f9fd 	bl	8000100 <__udivsi3>
 8002d06:	0003      	movs	r3, r0
 8002d08:	001a      	movs	r2, r3
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	18d3      	adds	r3, r2, r3
 8002d10:	6a39      	ldr	r1, [r7, #32]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7fd f9f4 	bl	8000100 <__udivsi3>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	60da      	str	r2, [r3, #12]
}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b006      	add	sp, #24
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	08002fd4 	.word	0x08002fd4
 8002d30:	0000fff0 	.word	0x0000fff0

08002d34 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b08b      	sub	sp, #44	@ 0x2c
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002d3e:	231f      	movs	r3, #31
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff ff4b 	bl	8002be8 <LL_USART_IsEnabled>
 8002d52:	1e03      	subs	r3, r0, #0
 8002d54:	d153      	bne.n	8002dfe <LL_USART_Init+0xca>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002e0c <LL_USART_Init+0xd8>)
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6899      	ldr	r1, [r3, #8]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	4319      	orrs	r1, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	4319      	orrs	r1, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff ff54 	bl	8002c30 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff ff61 	bl	8002c58 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a1d      	ldr	r2, [pc, #116]	@ (8002e10 <LL_USART_Init+0xdc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d105      	bne.n	8002daa <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f7ff fe3e 	bl	8002a20 <LL_RCC_GetUSARTClockFreq>
 8002da4:	0003      	movs	r3, r0
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	e00b      	b.n	8002dc2 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a19      	ldr	r2, [pc, #100]	@ (8002e14 <LL_USART_Init+0xe0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d107      	bne.n	8002dc2 <LL_USART_Init+0x8e>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002db2:	240c      	movs	r4, #12
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7ff fe14 	bl	80029e4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00f      	beq.n	8002df0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002dd0:	231f      	movs	r3, #31
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8002de4:	69b9      	ldr	r1, [r7, #24]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	0023      	movs	r3, r4
 8002dec:	f7ff ff48 	bl	8002c80 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0011      	movs	r1, r2
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff ff06 	bl	8002c0a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002dfe:	231f      	movs	r3, #31
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b009      	add	sp, #36	@ 0x24
 8002e0a:	bd90      	pop	{r4, r7, pc}
 8002e0c:	efff69f3 	.word	0xefff69f3
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40004400 	.word	0x40004400

08002e18 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <LL_mDelay+0x44>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e26:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	d00c      	beq.n	8002e4c <LL_mDelay+0x34>
  {
    tmpDelay ++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3301      	adds	r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e008      	b.n	8002e4c <LL_mDelay+0x34>
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e3a:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <LL_mDelay+0x44>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	025b      	lsls	r3, r3, #9
 8002e42:	4013      	ands	r3, r2
 8002e44:	d002      	beq.n	8002e4c <LL_mDelay+0x34>
    {
      tmpDelay --;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f3      	bne.n	8002e3a <LL_mDelay+0x22>
    }
  }
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b004      	add	sp, #16
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	e000e010 	.word	0xe000e010

08002e60 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <LL_SetSystemCoreClock+0x18>)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	601a      	str	r2, [r3, #0]
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b002      	add	sp, #8
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	20000000 	.word	0x20000000

08002e7c <memset>:
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	1882      	adds	r2, r0, r2
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d100      	bne.n	8002e86 <memset+0xa>
 8002e84:	4770      	bx	lr
 8002e86:	7019      	strb	r1, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	e7f9      	b.n	8002e80 <memset+0x4>

08002e8c <__libc_init_array>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	2600      	movs	r6, #0
 8002e90:	4c0c      	ldr	r4, [pc, #48]	@ (8002ec4 <__libc_init_array+0x38>)
 8002e92:	4d0d      	ldr	r5, [pc, #52]	@ (8002ec8 <__libc_init_array+0x3c>)
 8002e94:	1b64      	subs	r4, r4, r5
 8002e96:	10a4      	asrs	r4, r4, #2
 8002e98:	42a6      	cmp	r6, r4
 8002e9a:	d109      	bne.n	8002eb0 <__libc_init_array+0x24>
 8002e9c:	2600      	movs	r6, #0
 8002e9e:	f000 f819 	bl	8002ed4 <_init>
 8002ea2:	4c0a      	ldr	r4, [pc, #40]	@ (8002ecc <__libc_init_array+0x40>)
 8002ea4:	4d0a      	ldr	r5, [pc, #40]	@ (8002ed0 <__libc_init_array+0x44>)
 8002ea6:	1b64      	subs	r4, r4, r5
 8002ea8:	10a4      	asrs	r4, r4, #2
 8002eaa:	42a6      	cmp	r6, r4
 8002eac:	d105      	bne.n	8002eba <__libc_init_array+0x2e>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	00b3      	lsls	r3, r6, #2
 8002eb2:	58eb      	ldr	r3, [r5, r3]
 8002eb4:	4798      	blx	r3
 8002eb6:	3601      	adds	r6, #1
 8002eb8:	e7ee      	b.n	8002e98 <__libc_init_array+0xc>
 8002eba:	00b3      	lsls	r3, r6, #2
 8002ebc:	58eb      	ldr	r3, [r5, r3]
 8002ebe:	4798      	blx	r3
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	e7f2      	b.n	8002eaa <__libc_init_array+0x1e>
 8002ec4:	08003004 	.word	0x08003004
 8002ec8:	08003004 	.word	0x08003004
 8002ecc:	08003008 	.word	0x08003008
 8002ed0:	08003004 	.word	0x08003004

08002ed4 <_init>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr

08002ee0 <_fini>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr
